/// Verilog Memory Initialization File (.mem) generated by ./ex3_asm

/// 12-bit address
/// 16-bit data

// interrupt entry point
@000 0000	///                  ST0: 0000 [0000]: (    0:    0)                      	// interrupt return address
@001 4024	///                       0001 [4024]: BUN 024   (                I_HND)	// goto I_HND (interrupt handler)
// program entry point
// initialize data
@010 7800	///                  INI: 0010 [7800]: CLA                              	// AC         <- 0
@011 3340	///                       0011 [3340]: STA 340   (                  BYE)	// M[BYE]     <- 0
@012 3341	///                       0012 [3341]: STA 341   (              NXT_BYE)	// M[NXT_BYE] <- 0
@013 3342	///                       0013 [3342]: STA 342   (                  STT)	// M[STT]     <- 0
@014 3343	///                       0014 [3343]: STA 343   (              NXT_STT)	// M[NXT_STT] <- 0
@015 23a3	///                       0015 [23a3]: LDA 3a3   (                  VH1)	// AC         <- 1
@016 3345	///                       0016 [3345]: STA 345   (              NXT_INP)	// M[NXT_INP] <- 1 (change to input state after output process)
@017 3344	///                       0017 [3344]: STA 344   (              OUT_STT)	// M[OUT_STT] <- 1 (output state)
// set start message
@018 23a4	///                       0018 [23a4]: LDA 3a4   (                  VH2)	// AC <- 2
@019 52e1	///                       0019 [52e1]: BSA 2e1   (               SET_ML)	// call SET_ML (set message list)
@01a 03c9	///                       001a [03c9]: (  969:  969)                      
@01b 0440	///                       001b [0440]: ( 1088: 1088)                      
// setup IO registers
@01c 23a7	///                       001c [23a7]: LDA 3a7   (                  VH4)	// AC <- 4
@01d f008	///                       001d [f008]: IMK                              	// IMSK <- 0100 (S_OUT enabled)
@01e f020	///                       001e [f020]: SIO                              	// IOT <- 1 (serial-IO selected)
@01f f080	///                       001f [f080]: ION                              	// enable interrupt
// wait until (M[BYE] = 1)
@020 2340	///                   L0: 0020 [2340]: LDA 340   (                  BYE)	// AC <- M[BYE]
@021 7004	///                       0021 [7004]: SZA                              	// (M[BYE] == 0) ? skip next
@022 7001	///                       0022 [7001]: HLT                              
@023 4020	///                       0023 [4020]: BUN 020   (                   L0)	// goto L0
//////////// interrupt handler ///////////
// store AC & E to memory
@024 3324	///                I_HND: 0024 [3324]: STA 324   (                   BA)	// M[BA] <- AC	(store AC)
@025 7040	///                       0025 [7040]: CIL                              	// AC[0] <- E	(AC[15:1] is not important here...)
@026 3325	///                       0026 [3325]: STA 325   (                   BE)	// M[BE] <- AC	(store E)
//////////// state machine ///////////
// M[OUT_PD] = 0 (process input), 1 (process output)
// check state :
@027 2344	///                       0027 [2344]: LDA 344   (              OUT_STT)	// AC <- M[OUT_STT]
@028 7004	///                       0028 [7004]: SZA                              	// (M[OUT_STT] == 0) skip next
@029 4304	///                       0029 [4304]: BUN 304   (              PUT_OUT)	// goto PUT_OUT (process output)
//////////// process input ///////////
// M[OUT_STT] = 0 : input mode (M[TMI] <- INPR)
@02a f200	///                       002a [f200]: SKI                              	// (FGI = 0) ? skip next
@02b 4042	///                       002b [4042]: BUN 042   (                  IRT)	// goto IRT (return from interrupt handler) --> this should not happen...
@02c 7800	///                       002c [7800]: CLA                              	// AC      <- 0
@02d f800	///                       002d [f800]: INP                              	// AC[7:0] <- INPR
@02e 3323	///                       002e [3323]: STA 323   (                  TMI)	// M[TMI]  <- INPR
//////////// state switch : M[STT] = 0, 1, 2, 3, 4, 5, 6 ///////////
@02f 2342	///               STT_SW: 002f [2342]: LDA 342   (                  STT)	// AC <- M[STT]
@030 13ae	///                       0030 [13ae]: ADD 3ae   (                  VM1)	// AC <- M[STT] - 1
@031 7010	///                       0031 [7010]: SPA                              	// (M[STT] >= 1) ? skip next
@032 4055	///                       0032 [4055]: BUN 055   (                STT_0)	// goto STT_0 (M[STT] = 0: setup new game) --> M[NXT_STT] = 1 (get your move), 2 (put my move)
@033 13ae	///                       0033 [13ae]: ADD 3ae   (                  VM1)	// AC <- M[STT] - 1 - 1
@034 7010	///                       0034 [7010]: SPA                              	// (M[STT] >= 2) ? skip next
@035 4098	///                       0035 [4098]: BUN 098   (                STT_1)	// goto STT_1 (M[STT] = 1: get your move)  --> M[NXT_STT] = 2 (put my move), 4 (end game)
@036 13ae	///                       0036 [13ae]: ADD 3ae   (                  VM1)	// AC <- M[STT] - 2 - 1
@037 7010	///                       0037 [7010]: SPA                              	// (M[STT] >= 3) ? skip next
@038 418d	///                       0038 [418d]: BUN 18d   (                STT_2)	// goto STT_2 (M[STT] = 2: put my move)    --> M[NXT_STT] = 3 (show my move)
@039 13ae	///                       0039 [13ae]: ADD 3ae   (                  VM1)	// AC <- M[STT] - 3 - 1
@03a 7010	///                       003a [7010]: SPA                              	// (M[STT] >= 4) ? skip next
@03b 41f1	///                       003b [41f1]: BUN 1f1   (                STT_3)	// goto STT_3 (M[STT] = 3: show my move)   --> M[NXT_STT] = 1 (get your move), 4 (end game)
@03c 41f2	///                       003c [41f2]: BUN 1f2   (                STT_4)	// goto STT_4 (M[STT] = 4: end game)       --> M[NXT_STT] = 0 (setup new game)
//////////// end tic-tac-toe ///////////
@03d 23a3	///              END_TTT: 003d [23a3]: LDA 3a3   (                  VH1)	// AC         <- 1
@03e 52e1	///                       003e [52e1]: BSA 2e1   (               SET_ML)	// call SET_ML (set message list)
@03f 03e6	///                       003f [03e6]: (  998:  998)                      
@040 3341	///                       0040 [3341]: STA 341   (              NXT_BYE)	// M[NXT_BYE] <- 1
@041 4047	///                       0041 [4047]: BUN 047   (              PRP_OUT)	// goto PRP_OUT (prepare output)
//////////// return from interrupt handler ///////////
@042 2325	///                  IRT: 0042 [2325]: LDA 325   (                   BE)	// AC  <- M[BE]
@043 7080	///                       0043 [7080]: CIR                              	// E   <- AC[0]	(restore E)
@044 2324	///                       0044 [2324]: LDA 324   (                   BA)	// AC  <- M[BA]	(restore AC)
@045 f080	///                       0045 [f080]: ION                              	// IEN <- 1		(enable interrupt)
@046 c000	///                       0046 [c000]: BUN 000 I (                  ST0)	// return from ST0 (interrupt handler)
//////////// prepare output ///////////
@047 23a3	///              PRP_OUT: 0047 [23a3]: LDA 3a3   (                  VH1)	// AC         <- 1
@048 3344	///                       0048 [3344]: STA 344   (              OUT_STT)	// M[OUT_STT] <- 1 (output state)
//		LDA VH4			/ AC         <- 4
//		IMK				/ IMASK      <- 0100 (S_OUT enabled)
@049 4042	///                       0049 [4042]: BUN 042   (                  IRT)	// goto IRT (return from interrupt handler)
@04a 0000	///             PRP_TURN: 004a [0000]: (    0:    0)                      	// return address
//////////// subroutine (prepare next turn)  ///////////
@04b 2354	///                       004b [2354]: LDA 354   (                 TURN)	// AC         <- M[TURN]
@04c 7004	///                       004c [7004]: SZA                              	// (AC = 0) ? skip next
@04d 4052	///                       004d [4052]: BUN 052   (               PRP_MT)	// goto PRP_MT (prepare my turn)
// prepare "your turn"
@04e 23a3	///                       004e [23a3]: LDA 3a3   (                  VH1)	// AC         <- 1
@04f 3343	///                       004f [3343]: STA 343   (              NXT_STT)	// M[NXT_STT] <- 1 (next state : get your move)
@050 3345	///                       0050 [3345]: STA 345   (              NXT_INP)	// M[INP]     <- 1 (change to input state after output process)
@051 c04a	///                       0051 [c04a]: BUN 04a I (             PRP_TURN)	// return from PRP_TURN
// prepare "my turn"
@052 23a4	///               PRP_MT: 0052 [23a4]: LDA 3a4   (                  VH2)	// AC         <- 2
@053 3343	///                       0053 [3343]: STA 343   (              NXT_STT)	// M[NXT_STT] <- 2 (next state : put my move)
@054 c04a	///                       0054 [c04a]: BUN 04a I (             PRP_TURN)	// return from PRP_TURN
//////////// M[STT] = 0 : setup new game  ///////////
// determine who gets the opening move 
@055 23b9	///                STT_0: 0055 [23b9]: LDA 3b9   (                 CH_0)	// AC <- '0'
@056 7200	///                       0056 [7200]: CMA                              
@057 7020	///                       0057 [7020]: INC                              	// AC <- -'0'
@058 1323	///                       0058 [1323]: ADD 323   (                  TMI)	// AC <- M[TMI] - '0'
@059 3354	///                       0059 [3354]: STA 354   (                 TURN)	// M[TURM] <- M[TMI] - '0'
@05a 7010	///                       005a [7010]: SPA                              	// (M[TMI] >= '0') ? skip next
@05b 403d	///                       005b [403d]: BUN 03d   (              END_TTT)	// goto END_TTT (end tic-tac-toe : M[TMI] < '0')
@05c 13af	///                       005c [13af]: ADD 3af   (                  VM2)	// AC <- M[TURM] - 2
@05d 7008	///                       005d [7008]: SNA                              	// (M[TURM] < 2) ? skip next
@05e 403d	///                       005e [403d]: BUN 03d   (              END_TTT)	// goto END_TTT (end tic-tac-toe : M[TMI] >= '2')
// clear board
@05f 23b7	///                       005f [23b7]: LDA 3b7   (                 VM20)	// AC       <- -20
@060 3327	///                       0060 [3327]: STA 327   (                CNT_1)	// M[CNT1]  <- -20
@061 2356	///                       0061 [2356]: LDA 356   (                A_BRD)	// AC       <- M[A_BRD] (BRD)
@062 332e	///                       0062 [332e]: STA 32e   (                P_BRD)	// M[P_BRD] <- BRD
@063 236b	///                       0063 [236b]: LDA 36b   (            A_INI_BRD)
@064 3331	///                       0064 [3331]: STA 331   (            P_INI_BRD)
//CLA				/ AC       <- 0
// loop clear board
@065 a331	///            L_CLR_BRD: 0065 [a331]: LDA 331 I (            P_INI_BRD)
@066 b32e	///                       0066 [b32e]: STA 32e I (                P_BRD)	// M[M[P_BRD]] <- 0
@067 632e	///                       0067 [632e]: ISZ 32e   (                P_BRD)	// ++M[P_BRD]
@068 6331	///                       0068 [6331]: ISZ 331   (            P_INI_BRD)
@069 6327	///                       0069 [6327]: ISZ 327   (                CNT_1)	// ((++M[CNT_1]) == 0) ? skip next
@06a 4065	///                       006a [4065]: BUN 065   (            L_CLR_BRD)	// goto L_CLR_BRD (loop clear board)
// clear bullets and speed of bullets
@06b 2380	///                       006b [2380]: LDA 380   (         TOTAL_BULLET)
@06c 7200	///                       006c [7200]: CMA                              
@06d 7020	///                       006d [7020]: INC                              
@06e 3381	///                       006e [3381]: STA 381   (           CNT_BULLET)
@06f 2382	///                       006f [2382]: LDA 382   (        A_MY_BULLET_X)
@070 3332	///                       0070 [3332]: STA 332   (        P_MY_BULLET_X)
@071 2387	///                       0071 [2387]: LDA 387   (        A_MY_BULLET_Y)
@072 3333	///                       0072 [3333]: STA 333   (        P_MY_BULLET_Y)
@073 2391	///                       0073 [2391]: LDA 391   (        A_PC_BULLET_X)
@074 3334	///                       0074 [3334]: STA 334   (        P_PC_BULLET_X)
@075 2396	///                       0075 [2396]: LDA 396   (        A_PC_BULLET_Y)
@076 3335	///                       0076 [3335]: STA 335   (        P_PC_BULLET_Y)
@077 238c	///                       0077 [238c]: LDA 38c   (    A_MY_BULLET_SPEED)
@078 3336	///                       0078 [3336]: STA 336   (    P_MY_BULLET_SPEED)
@079 239b	///                       0079 [239b]: LDA 39b   (    A_PC_BULLET_SPEED)
@07a 3337	///                       007a [3337]: STA 337   (    P_PC_BULLET_SPEED)
// loop clear bullets and speed
@07b 23ae	///         L_CLR_BULLET: 007b [23ae]: LDA 3ae   (                  VM1)
@07c b332	///                       007c [b332]: STA 332 I (        P_MY_BULLET_X)
@07d b333	///                       007d [b333]: STA 333 I (        P_MY_BULLET_Y)
@07e b334	///                       007e [b334]: STA 334 I (        P_PC_BULLET_X)
@07f b335	///                       007f [b335]: STA 335 I (        P_PC_BULLET_Y)
@080 7800	///                       0080 [7800]: CLA                              
@081 b336	///                       0081 [b336]: STA 336 I (    P_MY_BULLET_SPEED)
@082 b337	///                       0082 [b337]: STA 337 I (    P_PC_BULLET_SPEED)
@083 6332	///                       0083 [6332]: ISZ 332   (        P_MY_BULLET_X)
@084 6333	///                       0084 [6333]: ISZ 333   (        P_MY_BULLET_Y)
@085 6334	///                       0085 [6334]: ISZ 334   (        P_PC_BULLET_X)
@086 6335	///                       0086 [6335]: ISZ 335   (        P_PC_BULLET_Y)
@087 6336	///                       0087 [6336]: ISZ 336   (    P_MY_BULLET_SPEED)
@088 6337	///                       0088 [6337]: ISZ 337   (    P_PC_BULLET_SPEED)
@089 6381	///                       0089 [6381]: ISZ 381   (           CNT_BULLET)
@08a 407b	///                       008a [407b]: BUN 07b   (         L_CLR_BULLET)
// initialize move_count, winner
@08b 7800	///                       008b [7800]: CLA                              
@08c 3355	///                       008c [3355]: STA 355   (               WINNER)	// M[WINNER]  <- 0
@08d 3487	///                       008d [3487]: STA 487   (               MY_WIN)
@08e 3488	///                       008e [3488]: STA 488   (               PC_WIN)
@08f 23a2	///                       008f [23a2]: LDA 3a2   (                  VD1)
@090 3484	///                       0090 [3484]: STA 484   (                 MY_Y)
@091 23a6	///                       0091 [23a6]: LDA 3a6   (                  VD3)
@092 3486	///                       0092 [3486]: STA 486   (                 PC_Y)
@093 23b8	///                       0093 [23b8]: LDA 3b8   (                VM100)	// AC         <- -9
@094 3353	///                       0094 [3353]: STA 353   (              CNT_MOV)	// M[CNT_MOV] <- -9
@095 504a	///                       0095 [504a]: BSA 04a   (             PRP_TURN)	// call PRP_TURN (prepare next turn)
@096 520c	///                       0096 [520c]: BSA 20c   (            SHOW_GAME)	// call SHOW_GAME
@097 4047	///                       0097 [4047]: BUN 047   (              PRP_OUT)	// goto PRP_OUT (prepare output)
//////////// M[STT] = 1 : get your move (must satisfy: '1' <= M[TMI] <= '9')  ///////////
@098 23bb	///                STT_1: 0098 [23bb]: LDA 3bb   (                 CH_a)
@099 5250	///                       0099 [5250]: BSA 250   (               CHK_CH)
@09a 7004	///                       009a [7004]: SZA                              	// (AC = 0) ? skip next (not a)
@09b 40a8	///                       009b [40a8]: BUN 0a8   (                 LEFT)
@09c 23bc	///                       009c [23bc]: LDA 3bc   (                 CH_d)
@09d 5250	///                       009d [5250]: BSA 250   (               CHK_CH)
@09e 7004	///                       009e [7004]: SZA                              	// (AC = 0) ? skip next (not d)
@09f 40ae	///                       009f [40ae]: BUN 0ae   (                RIGHT)
@0a0 23be	///                       00a0 [23be]: LDA 3be   (                 CH_s)
@0a1 5250	///                       00a1 [5250]: BSA 250   (               CHK_CH)
@0a2 7004	///                       00a2 [7004]: SZA                              
@0a3 40ea	///                       00a3 [40ea]: BUN 0ea   (                 KEEP)	// not move
@0a4 23bd	///                       00a4 [23bd]: LDA 3bd   (                 CH_j)
@0a5 7004	///                       00a5 [7004]: SZA                              	// (AC = 0) ? skip next (not j)
@0a6 40d8	///                       00a6 [40d8]: BUN 0d8   (                 FIRE)
@0a7 40d2	///                       00a7 [40d2]: BUN 0d2   (                NG_YM)	//   not a or d or j or s
@0a8 2484	///                 LEFT: 00a8 [2484]: LDA 484   (                 MY_Y)
@0a9 13ae	///                       00a9 [13ae]: ADD 3ae   (                  VM1)
@0aa 7010	///                       00aa [7010]: SPA                              	// MY - 1 >= 0, can move
@0ab 40d2	///                       00ab [40d2]: BUN 0d2   (                NG_YM)
@0ac 3484	///                       00ac [3484]: STA 484   (                 MY_Y)
@0ad 40b6	///                       00ad [40b6]: BUN 0b6   (                 MOVE)
@0ae 2484	///                RIGHT: 00ae [2484]: LDA 484   (                 MY_Y)
@0af 13b0	///                       00af [13b0]: ADD 3b0   (                  VM3)
@0b0 7008	///                       00b0 [7008]: SNA                              
@0b1 40d2	///                       00b1 [40d2]: BUN 0d2   (                NG_YM)	// MY_Y >=3 , can't move
@0b2 2484	///                       00b2 [2484]: LDA 484   (                 MY_Y)	// MY_Y < 3, cant move        
@0b3 13a3	///                       00b3 [13a3]: ADD 3a3   (                  VH1)
@0b4 3484	///                       00b4 [3484]: STA 484   (                 MY_Y)
@0b5 40b6	///                       00b5 [40b6]: BUN 0b6   (                 MOVE)
// put your move to board
@0b6 2484	///                 MOVE: 00b6 [2484]: LDA 484   (                 MY_Y)
@0b7 7200	///                       00b7 [7200]: CMA                              
@0b8 7020	///                       00b8 [7020]: INC                              
@0b9 332a	///                       00b9 [332a]: STA 32a   (             CNT_MOVE)
@0ba 2356	///                       00ba [2356]: LDA 356   (                A_BRD)	// AC        <- M[A_BRD] (BRD)
@0bb 13ad	///                       00bb [13ad]: ADD 3ad   (                 VD16)	// AC        <- BRD + 16
@0bc 332e	///                       00bc [332e]: STA 32e   (                P_BRD)	// M[P_BRD]  <- BRD + M[TMI]
@0bd 23c2	///                       00bd [23c2]: LDA 3c2   (                 CH_O)
@0be b32e	///                       00be [b32e]: STA 32e I (                P_BRD)
@0bf 632e	///                       00bf [632e]: ISZ 32e   (                P_BRD)
@0c0 b32e	///                       00c0 [b32e]: STA 32e I (                P_BRD)
@0c1 632e	///                       00c1 [632e]: ISZ 32e   (                P_BRD)
@0c2 b32e	///                       00c2 [b32e]: STA 32e I (                P_BRD)
@0c3 632e	///                       00c3 [632e]: ISZ 32e   (                P_BRD)
@0c4 b32e	///                       00c4 [b32e]: STA 32e I (                P_BRD)
@0c5 2356	///                       00c5 [2356]: LDA 356   (                A_BRD)	// AC        <- M[A_BRD] (BRD)
@0c6 13ad	///                       00c6 [13ad]: ADD 3ad   (                 VD16)	// AC        <- BRD + 16
@0c7 332e	///                       00c7 [332e]: STA 32e   (                P_BRD)	// M[P_BRD]  <- BRD + 16
@0c8 232a	///                       00c8 [232a]: LDA 32a   (             CNT_MOVE)
@0c9 7004	///                       00c9 [7004]: SZA                              
@0ca 40cc	///                       00ca [40cc]: BUN 0cc   (                 LOOP)
@0cb 40cf	///                       00cb [40cf]: BUN 0cf   (               PUT_ME)
// loop increase board
@0cc 632e	///                 LOOP: 00cc [632e]: ISZ 32e   (                P_BRD)
@0cd 632a	///                       00cd [632a]: ISZ 32a   (             CNT_MOVE)
@0ce 40cc	///                       00ce [40cc]: BUN 0cc   (                 LOOP)
// put new position
@0cf 23bf	///               PUT_ME: 00cf [23bf]: LDA 3bf   (                 CH_M)
@0d0 b32e	///                       00d0 [b32e]: STA 32e I (                P_BRD)
@0d1 40ff	///                       00d1 [40ff]: BUN 0ff   (         PRE_UPD_TURN)
// your move is invalid
@0d2 23a3	///                NG_YM: 00d2 [23a3]: LDA 3a3   (                  VH1)	// AC     <- 1
@0d3 52e1	///                       00d3 [52e1]: BSA 2e1   (               SET_ML)	// call SET_ML (set message list)
@0d4 0432	///                       00d4 [0432]: ( 1074: 1074)                      
@0d5 23a3	///                       00d5 [23a3]: LDA 3a3   (                  VH1)	// AC     <- 1
@0d6 3345	///                       00d6 [3345]: STA 345   (              NXT_INP)	// M[INP] <- 1
@0d7 4047	///                       00d7 [4047]: BUN 047   (              PRP_OUT)	// goto PRP_OUT (prepare output)
@0d8 2382	///                 FIRE: 00d8 [2382]: LDA 382   (        A_MY_BULLET_X)
@0d9 3332	///                       00d9 [3332]: STA 332   (        P_MY_BULLET_X)
@0da 2387	///                       00da [2387]: LDA 387   (        A_MY_BULLET_Y)
@0db 3333	///                       00db [3333]: STA 333   (        P_MY_BULLET_Y)
@0dc 238c	///                       00dc [238c]: LDA 38c   (    A_MY_BULLET_SPEED)
@0dd 3336	///                       00dd [3336]: STA 336   (    P_MY_BULLET_SPEED)
@0de 2380	///                       00de [2380]: LDA 380   (         TOTAL_BULLET)
@0df 7200	///                       00df [7200]: CMA                              
@0e0 7020	///                       00e0 [7020]: INC                              
@0e1 3381	///                       00e1 [3381]: STA 381   (           CNT_BULLET)	// times of loop
@0e2 a332	///          FIND_BULLET: 00e2 [a332]: LDA 332 I (        P_MY_BULLET_X)
@0e3 7010	///                       00e3 [7010]: SPA                              	// bullet >= 0, can't shoot
@0e4 40ee	///                       00e4 [40ee]: BUN 0ee   (          LOAD_BULLET)
@0e5 6332	///                       00e5 [6332]: ISZ 332   (        P_MY_BULLET_X)
@0e6 6333	///                       00e6 [6333]: ISZ 333   (        P_MY_BULLET_Y)
@0e7 6336	///                       00e7 [6336]: ISZ 336   (    P_MY_BULLET_SPEED)
@0e8 6381	///                       00e8 [6381]: ISZ 381   (           CNT_BULLET)	// if can't find position, default action: goto KEEP 
@0e9 40e2	///                       00e9 [40e2]: BUN 0e2   (          FIND_BULLET)	// find next position for bullet
@0ea 2489	///                 KEEP: 00ea [2489]: LDA 489   (             MY_SPEED)
@0eb 7020	///                       00eb [7020]: INC                              
@0ec 3489	///                       00ec [3489]: STA 489   (             MY_SPEED)
@0ed 40ff	///                       00ed [40ff]: BUN 0ff   (         PRE_UPD_TURN)
@0ee 2483	///          LOAD_BULLET: 00ee [2483]: LDA 483   (                 MY_X)
@0ef b332	///                       00ef [b332]: STA 332 I (        P_MY_BULLET_X)
@0f0 2484	///                       00f0 [2484]: LDA 484   (                 MY_Y)
@0f1 b333	///                       00f1 [b333]: STA 333 I (        P_MY_BULLET_Y)
@0f2 2489	///                       00f2 [2489]: LDA 489   (             MY_SPEED)
@0f3 13ae	///                       00f3 [13ae]: ADD 3ae   (                  VM1)	// AC = MY_SPEED - 2
@0f4 7004	///                       00f4 [7004]: SZA                              
@0f5 40fa	///                       00f5 [40fa]: BUN 0fa   (           MY_SPEED_2)
@0f6 40f7	///                       00f6 [40f7]: BUN 0f7   (           MY_SPEED_1)
@0f7 23a3	///           MY_SPEED_1: 00f7 [23a3]: LDA 3a3   (                  VH1)
@0f8 b336	///                       00f8 [b336]: STA 336 I (    P_MY_BULLET_SPEED)	// MY_SPEED = 1, put 1 to the array
@0f9 40ff	///                       00f9 [40ff]: BUN 0ff   (         PRE_UPD_TURN)
@0fa 23a4	///           MY_SPEED_2: 00fa [23a4]: LDA 3a4   (                  VH2)
@0fb b336	///                       00fb [b336]: STA 336 I (    P_MY_BULLET_SPEED)	// MY_SPEED >= 2
@0fc 23a3	///                       00fc [23a3]: LDA 3a3   (                  VH1)
@0fd 3489	///                       00fd [3489]: STA 489   (             MY_SPEED)
@0fe 40ff	///                       00fe [40ff]: BUN 0ff   (         PRE_UPD_TURN)
@0ff 523e	///         PRE_UPD_TURN: 00ff [523e]: BSA 23e   (             UPD_TURN)
@100 232d	///                       0100 [232d]: LDA 32d   (             CNT_TURN)
@101 7020	///                       0101 [7020]: INC                              
@102 332d	///                       0102 [332d]: STA 32d   (             CNT_TURN)
@103 7004	///                       0103 [7004]: SZA                              	// CNT_TURN = 0, goto UPD_BULLET, update bullet every 2 turns
@104 4047	///                       0104 [4047]: BUN 047   (              PRP_OUT)
@105 510f	///                       0105 [510f]: BSA 10f   (           UPD_BULLET)
@106 4047	///                       0106 [4047]: BUN 047   (              PRP_OUT)
@107 5258	///                       0107 [5258]: BSA 258   (              CHK_WIN)	// call CHK_WIN
@108 7004	///                       0108 [7004]: SZA                              	// (AC == 0) ? skip next (AC = winner mark)
@109 410b	///                       0109 [410b]: BUN 10b   (             END_GAME)	// goto END_TURN (winner mark != 0)
@10a 4047	///                       010a [4047]: BUN 047   (              PRP_OUT)
@10b 23a7	///             END_GAME: 010b [23a7]: LDA 3a7   (                  VH4)	// AC         <- 4
@10c 3343	///                       010c [3343]: STA 343   (              NXT_STT)	// M[NXT_STT] <- 4 (next state : end game)
@10d 520c	///                       010d [520c]: BSA 20c   (            SHOW_GAME)	// call SHOW_GAME
@10e 4047	///                       010e [4047]: BUN 047   (              PRP_OUT)
@10f 0000	///           UPD_BULLET: 010f [0000]: (    0:    0)                      	// update position of bullets
@110 23af	///                       0110 [23af]: LDA 3af   (                  VM2)	// initialize CNT_TURN to -2
@111 332d	///                       0111 [332d]: STA 32d   (             CNT_TURN)
@112 2380	///                       0112 [2380]: LDA 380   (         TOTAL_BULLET)
@113 7200	///                       0113 [7200]: CMA                              
@114 7020	///                       0114 [7020]: INC                              
@115 3381	///                       0115 [3381]: STA 381   (           CNT_BULLET)
@116 2382	///                       0116 [2382]: LDA 382   (        A_MY_BULLET_X)	// only need to update x coordinate of bullet
@117 3332	///                       0117 [3332]: STA 332   (        P_MY_BULLET_X)
@118 238c	///                       0118 [238c]: LDA 38c   (    A_MY_BULLET_SPEED)
@119 3336	///                       0119 [3336]: STA 336   (    P_MY_BULLET_SPEED)
// update every buttet 
@11a a336	///LOOP_UPDATE_MY_BULLET: 011a [a336]: LDA 336 I (    P_MY_BULLET_SPEED)
@11b 7200	///                       011b [7200]: CMA                              
@11c 7020	///                       011c [7020]: INC                              	// AC = -speed
@11d 9332	///                       011d [9332]: ADD 332 I (        P_MY_BULLET_X)	// x = x - speed
@11e b332	///                       011e [b332]: STA 332 I (        P_MY_BULLET_X)
@11f 6336	///                       011f [6336]: ISZ 336   (    P_MY_BULLET_SPEED)	// speed[i ++]
@120 6332	///                       0120 [6332]: ISZ 332   (        P_MY_BULLET_X)	// x[i ++]
@121 6381	///                       0121 [6381]: ISZ 381   (           CNT_BULLET)
@122 411a	///                       0122 [411a]: BUN 11a   (LOOP_UPDATE_MY_BULLET)
// prepare to update pc's bullets
@123 2380	///                       0123 [2380]: LDA 380   (         TOTAL_BULLET)
@124 7200	///                       0124 [7200]: CMA                              
@125 7020	///                       0125 [7020]: INC                              
@126 3381	///                       0126 [3381]: STA 381   (           CNT_BULLET)
@127 2391	///                       0127 [2391]: LDA 391   (        A_PC_BULLET_X)	// only need to update x coordinate of bullet
@128 3334	///                       0128 [3334]: STA 334   (        P_PC_BULLET_X)
@129 239b	///                       0129 [239b]: LDA 39b   (    A_PC_BULLET_SPEED)
@12a 3337	///                       012a [3337]: STA 337   (    P_PC_BULLET_SPEED)
@12b a334	///LOOP_UPDATE_PC_BULLET: 012b [a334]: LDA 334 I (        P_PC_BULLET_X)
@12c 13b2	///                       012c [13b2]: ADD 3b2   (                  VM5)
@12d 7010	///                       012d [7010]: SPA                              
@12e 4133	///                       012e [4133]: BUN 133   (  UPD_PC_BULLET_SPEED)
@12f 4130	///                       012f [4130]: BUN 130   (           INI_BULLET)
@130 23ae	///           INI_BULLET: 0130 [23ae]: LDA 3ae   (                  VM1)
@131 b334	///                       0131 [b334]: STA 334 I (        P_PC_BULLET_X)
@132 4136	///                       0132 [4136]: BUN 136   (                  NXT)
@133 a337	///  UPD_PC_BULLET_SPEED: 0133 [a337]: LDA 337 I (    P_PC_BULLET_SPEED)	// AC = pc_speed
@134 9334	///                       0134 [9334]: ADD 334 I (        P_PC_BULLET_X)	// x = x + speed
@135 b334	///                       0135 [b334]: STA 334 I (        P_PC_BULLET_X)
@136 6337	///                  NXT: 0136 [6337]: ISZ 337   (    P_PC_BULLET_SPEED)	// speed[i ++]
@137 6334	///                       0137 [6334]: ISZ 334   (        P_PC_BULLET_X)	// x[i ++]
@138 6381	///                       0138 [6381]: ISZ 381   (           CNT_BULLET)
@139 412b	///                       0139 [412b]: BUN 12b   (LOOP_UPDATE_PC_BULLET)
// after updating all bullets, draw bullets on the board
@13a 2356	///           UPDATE_BRD: 013a [2356]: LDA 356   (                A_BRD)	// AC        <- M[A_BRD] (BRD)
@13b 13ab	///                       013b [13ab]: ADD 3ab   (                  VD4)	// AC        <- BRD + 4
@13c 332e	///                       013c [332e]: STA 32e   (                P_BRD)	// M[P_BRD]  <- BRD + M[TMI]
@13d 23b6	///                       013d [23b6]: LDA 3b6   (                 VM11)
@13e 332b	///                       013e [332b]: STA 32b   (       CNT_CLR_BULLET)
@13f 23c1	///                       013f [23c1]: LDA 3c1   (               CH_DOT)
@140 b32e	///                       0140 [b32e]: STA 32e I (                P_BRD)
// first, put the 12 mass to . 
@141 632e	///           CLR_BULLET: 0141 [632e]: ISZ 32e   (                P_BRD)
@142 b32e	///                       0142 [b32e]: STA 32e I (                P_BRD)
@143 632b	///                       0143 [632b]: ISZ 32b   (       CNT_CLR_BULLET)
@144 4141	///                       0144 [4141]: BUN 141   (           CLR_BULLET)
@145 2380	///                       0145 [2380]: LDA 380   (         TOTAL_BULLET)
@146 7200	///                       0146 [7200]: CMA                              
@147 7020	///                       0147 [7020]: INC                              
@148 3381	///                       0148 [3381]: STA 381   (           CNT_BULLET)	// total number of bullets (control loop)
//	BUN DRAW_PC_BULLET
@149 2382	///                       0149 [2382]: LDA 382   (        A_MY_BULLET_X)
@14a 3332	///                       014a [3332]: STA 332   (        P_MY_BULLET_X)
@14b 2387	///                       014b [2387]: LDA 387   (        A_MY_BULLET_Y)
@14c 3333	///                       014c [3333]: STA 333   (        P_MY_BULLET_Y)
@14d 2356	///     LOOP_DRAW_BULLET: 014d [2356]: LDA 356   (                A_BRD)
@14e 332e	///                       014e [332e]: STA 32e   (                P_BRD)
@14f a332	///                       014f [a332]: LDA 332 I (        P_MY_BULLET_X)
@150 7010	///                       0150 [7010]: SPA                              
@151 4160	///                       0151 [4160]: BUN 160   (           NXT_BULLET)	// only draw bullets with x >= 0
@152 7040	///                       0152 [7040]: CIL                              
@153 7040	///                       0153 [7040]: CIL                              	// X = X * 4
@154 9333	///                       0154 [9333]: ADD 333 I (        P_MY_BULLET_Y)	// AC = 4*X + Y
@155 7200	///                       0155 [7200]: CMA                              
@156 7020	///                       0156 [7020]: INC                              
@157 332c	///                       0157 [332c]: STA 32c   (      CNT_FIND_BULLET)	// CNT_CLR_BULLET = - (4*X + Y)
@158 7004	///                       0158 [7004]: SZA                              
@159 415b	///                       0159 [415b]: BUN 15b   (     LOOP_FIND_BULLET)
@15a 415e	///                       015a [415e]: BUN 15e   (           PUT_BULLET)
// find postion to draw bullet
@15b 632e	///     LOOP_FIND_BULLET: 015b [632e]: ISZ 32e   (                P_BRD)
@15c 632c	///                       015c [632c]: ISZ 32c   (      CNT_FIND_BULLET)
@15d 415b	///                       015d [415b]: BUN 15b   (     LOOP_FIND_BULLET)
// put bullet to the board
@15e 23c3	///           PUT_BULLET: 015e [23c3]: LDA 3c3   (                 CH_I)
@15f b32e	///                       015f [b32e]: STA 32e I (                P_BRD)
@160 6332	///           NXT_BULLET: 0160 [6332]: ISZ 332   (        P_MY_BULLET_X)
@161 6333	///                       0161 [6333]: ISZ 333   (        P_MY_BULLET_Y)
@162 6381	///                       0162 [6381]: ISZ 381   (           CNT_BULLET)
@163 414d	///                       0163 [414d]: BUN 14d   (     LOOP_DRAW_BULLET)
@164 520c	///                       0164 [520c]: BSA 20c   (            SHOW_GAME)
@165 c10f	///                       0165 [c10f]: BUN 10f I (           UPD_BULLET)
@166 2356	///       DRAW_PC_BULLET: 0166 [2356]: LDA 356   (                A_BRD)	// AC        <- M[A_BRD] (BRD)
@167 332e	///                       0167 [332e]: STA 32e   (                P_BRD)	// M[P_BRD]  <- BRD + 4
@168 2380	///                       0168 [2380]: LDA 380   (         TOTAL_BULLET)
@169 7200	///                       0169 [7200]: CMA                              
@16a 7020	///                       016a [7020]: INC                              
@16b 3381	///                       016b [3381]: STA 381   (           CNT_BULLET)
@16c 2391	///                       016c [2391]: LDA 391   (        A_PC_BULLET_X)
@16d 3334	///                       016d [3334]: STA 334   (        P_PC_BULLET_X)
@16e 2396	///                       016e [2396]: LDA 396   (        A_PC_BULLET_Y)
@16f 3335	///                       016f [3335]: STA 335   (        P_PC_BULLET_Y)
@170 2356	///  LOOP_DRAW_PC_BULLET: 0170 [2356]: LDA 356   (                A_BRD)
@171 332e	///                       0171 [332e]: STA 32e   (                P_BRD)
@172 a334	///                       0172 [a334]: LDA 334 I (        P_PC_BULLET_X)
@173 7010	///                       0173 [7010]: SPA                              
@174 4187	///                       0174 [4187]: BUN 187   (        NXT_PC_BULLET)	// x < 0, skip initial value
@175 13b2	///                       0175 [13b2]: ADD 3b2   (                  VM5)
@176 7008	///                       0176 [7008]: SNA                              
@177 4187	///                       0177 [4187]: BUN 187   (        NXT_PC_BULLET)	// only draw bullets with x <= 4
@178 a334	///                       0178 [a334]: LDA 334 I (        P_PC_BULLET_X)
@179 7040	///                       0179 [7040]: CIL                              
@17a 7040	///                       017a [7040]: CIL                              	// X = X * 4
@17b 9335	///                       017b [9335]: ADD 335 I (        P_PC_BULLET_Y)	// AC = 4*X + Y
@17c 7200	///                       017c [7200]: CMA                              
@17d 7020	///                       017d [7020]: INC                              
@17e 332c	///                       017e [332c]: STA 32c   (      CNT_FIND_BULLET)	// CNT_CLR_BULLET = - (4*X + Y)
@17f 7004	///                       017f [7004]: SZA                              
@180 4182	///                       0180 [4182]: BUN 182   (  LOOP_FIND_PC_BULLET)
@181 4185	///                       0181 [4185]: BUN 185   (        PUT_PC_BULLET)
// find postion to draw bullet
@182 632e	///  LOOP_FIND_PC_BULLET: 0182 [632e]: ISZ 32e   (                P_BRD)
@183 632c	///                       0183 [632c]: ISZ 32c   (      CNT_FIND_BULLET)
@184 4182	///                       0184 [4182]: BUN 182   (  LOOP_FIND_PC_BULLET)
// put bullet to the board
@185 23c3	///        PUT_PC_BULLET: 0185 [23c3]: LDA 3c3   (                 CH_I)
@186 b32e	///                       0186 [b32e]: STA 32e I (                P_BRD)
@187 6334	///        NXT_PC_BULLET: 0187 [6334]: ISZ 334   (        P_PC_BULLET_X)
@188 6335	///                       0188 [6335]: ISZ 335   (        P_PC_BULLET_Y)
@189 6381	///                       0189 [6381]: ISZ 381   (           CNT_BULLET)
@18a 4170	///                       018a [4170]: BUN 170   (  LOOP_DRAW_PC_BULLET)
@18b 520c	///                       018b [520c]: BSA 20c   (            SHOW_GAME)
@18c c10f	///                       018c [c10f]: BUN 10f I (           UPD_BULLET)
//////////// M[STT] = 2 : put my move  ///////////
@18d 528e	///                STT_2: 018d [528e]: BSA 28e   (               MY_MOV)	// call MY_MOV (next move position stored in M[P_BRD])
// put my move to board
@18e 248b	///                       018e [248b]: LDA 48b   (            PC_ACTION)
@18f 13ae	///                       018f [13ae]: ADD 3ae   (                  VM1)	// AC <- M[STT] - 1
@190 7010	///                       0190 [7010]: SPA                              	// (M[STT] >= 1) ? skip next
@191 419b	///                       0191 [419b]: BUN 19b   (             PC_STT_0)	// goto PC_STT_0 (move to left)
@192 13ae	///                       0192 [13ae]: ADD 3ae   (                  VM1)
@193 7010	///                       0193 [7010]: SPA                              	// (M[STT] >= 2) ? skip next
@194 41a1	///                       0194 [41a1]: BUN 1a1   (             PC_STT_1)	// goto PC_STT_1 (move to right)
@195 13ae	///                       0195 [13ae]: ADD 3ae   (                  VM1)	// AC <- M[STT] - 2 - 1
@196 7010	///                       0196 [7010]: SPA                              	// (M[STT] >= 3) ? skip next
@197 41a9	///                       0197 [41a9]: BUN 1a9   (             PC_STT_2)
@198 13ae	///                       0198 [13ae]: ADD 3ae   (                  VM1)	// AC <- M[STT] - 3 - 1
@199 7010	///                       0199 [7010]: SPA                              	// (M[STT] >= 4) ? skip next
@19a 41ab	///                       019a [41ab]: BUN 1ab   (             PC_STT_3)	// goto PC_STT_3 (don't move)  
// move to left
@19b 2486	///             PC_STT_0: 019b [2486]: LDA 486   (                 PC_Y)
@19c 13ae	///                       019c [13ae]: ADD 3ae   (                  VM1)
@19d 7010	///                       019d [7010]: SPA                              	// MY - 1 >= 0, can move
@19e 41a1	///                       019e [41a1]: BUN 1a1   (             PC_STT_1)
@19f 3486	///                       019f [3486]: STA 486   (                 PC_Y)
@1a0 41af	///                       01a0 [41af]: BUN 1af   (              PC_MOVE)
//INC				/ AC           <- - BRD
//ADD P_BRD		/ AC           <- P_BRD - BRD (= pos)
//ADD CH_1		/ AC           <- pos + '1'
//STA MG_MY_MV0	/ M[MG_MY_MV0]  <- pos + '1'
// move to right
@1a1 2486	///             PC_STT_1: 01a1 [2486]: LDA 486   (                 PC_Y)
@1a2 13b0	///                       01a2 [13b0]: ADD 3b0   (                  VM3)
@1a3 7008	///                       01a3 [7008]: SNA                              
@1a4 419b	///                       01a4 [419b]: BUN 19b   (             PC_STT_0)	// MY_Y >=3 , can't move
@1a5 2486	///                       01a5 [2486]: LDA 486   (                 PC_Y)	// MY_Y < 3, cant move        
@1a6 13a3	///                       01a6 [13a3]: ADD 3a3   (                  VH1)
@1a7 3486	///                       01a7 [3486]: STA 486   (                 PC_Y)
@1a8 41af	///                       01a8 [41af]: BUN 1af   (              PC_MOVE)
// PC fires
@1a9 7800	///             PC_STT_2: 01a9 [7800]: CLA                              
@1aa 41cd	///                       01aa [41cd]: BUN 1cd   (              PC_FIRE)
// PC don't move
@1ab 248a	///             PC_STT_3: 01ab [248a]: LDA 48a   (             PC_SPEED)
@1ac 7020	///                       01ac [7020]: INC                              
@1ad 348a	///                       01ad [348a]: STA 48a   (             PC_SPEED)
@1ae 41c8	///                       01ae [41c8]: BUN 1c8   (           SET_PC_MSG)
// put  my(PC) move to board
@1af 2486	///              PC_MOVE: 01af [2486]: LDA 486   (                 PC_Y)
@1b0 7200	///                       01b0 [7200]: CMA                              
@1b1 7020	///                       01b1 [7020]: INC                              
@1b2 332a	///                       01b2 [332a]: STA 32a   (             CNT_MOVE)
@1b3 2356	///                       01b3 [2356]: LDA 356   (                A_BRD)	// AC        <- M[A_BRD] (BRD)
@1b4 332e	///                       01b4 [332e]: STA 32e   (                P_BRD)	// M[P_BRD]  <- BRD + M[TMI]
@1b5 23c2	///                       01b5 [23c2]: LDA 3c2   (                 CH_O)	// put O to the first line
@1b6 b32e	///                       01b6 [b32e]: STA 32e I (                P_BRD)
@1b7 632e	///                       01b7 [632e]: ISZ 32e   (                P_BRD)
@1b8 b32e	///                       01b8 [b32e]: STA 32e I (                P_BRD)
@1b9 632e	///                       01b9 [632e]: ISZ 32e   (                P_BRD)
@1ba b32e	///                       01ba [b32e]: STA 32e I (                P_BRD)
@1bb 632e	///                       01bb [632e]: ISZ 32e   (                P_BRD)
@1bc b32e	///                       01bc [b32e]: STA 32e I (                P_BRD)
@1bd 2356	///                       01bd [2356]: LDA 356   (                A_BRD)	// AC        <- M[A_BRD] (BRD)
@1be 332e	///                       01be [332e]: STA 32e   (                P_BRD)	// M[P_BRD]  <- BRD + 16   
@1bf 232a	///                       01bf [232a]: LDA 32a   (             CNT_MOVE)
@1c0 7004	///                       01c0 [7004]: SZA                              
@1c1 41c3	///                       01c1 [41c3]: BUN 1c3   (              LOOP_PC)
@1c2 41c6	///                       01c2 [41c6]: BUN 1c6   (               PUT_PC)
// loop increase board
@1c3 632e	///              LOOP_PC: 01c3 [632e]: ISZ 32e   (                P_BRD)
@1c4 632a	///                       01c4 [632a]: ISZ 32a   (             CNT_MOVE)
@1c5 41c3	///                       01c5 [41c3]: BUN 1c3   (              LOOP_PC)
// put new position
@1c6 23c0	///               PUT_PC: 01c6 [23c0]: LDA 3c0   (                 CH_E)
@1c7 b32e	///                       01c7 [b32e]: STA 32e I (                P_BRD)
// set output message
@1c8 52d3	///           SET_PC_MSG: 01c8 [52d3]: BSA 2d3   (              SET_MGP)	// call SET_MGP (set message to P_OUT)
@1c9 03e1	///                       01c9 [03e1]: (  993:  993)                      
@1ca 23a5	///                       01ca [23a5]: LDA 3a5   (                  VH3)	// AC           <- 3
@1cb 3343	///                       01cb [3343]: STA 343   (              NXT_STT)	// M[NXT_STT]   <- 3
@1cc 4047	///                       01cc [4047]: BUN 047   (              PRP_OUT)	// goto PRP_OUT (prepare output)
@1cd 2391	///              PC_FIRE: 01cd [2391]: LDA 391   (        A_PC_BULLET_X)
@1ce 3334	///                       01ce [3334]: STA 334   (        P_PC_BULLET_X)
@1cf 2396	///                       01cf [2396]: LDA 396   (        A_PC_BULLET_Y)
@1d0 3335	///                       01d0 [3335]: STA 335   (        P_PC_BULLET_Y)
@1d1 239b	///                       01d1 [239b]: LDA 39b   (    A_PC_BULLET_SPEED)
@1d2 3337	///                       01d2 [3337]: STA 337   (    P_PC_BULLET_SPEED)
@1d3 2380	///                       01d3 [2380]: LDA 380   (         TOTAL_BULLET)
@1d4 7200	///                       01d4 [7200]: CMA                              
@1d5 7020	///                       01d5 [7020]: INC                              
@1d6 3381	///                       01d6 [3381]: STA 381   (           CNT_BULLET)	// times of loop
@1d7 a334	///       PC_FIND_BULLET: 01d7 [a334]: LDA 334 I (        P_PC_BULLET_X)
@1d8 7010	///                       01d8 [7010]: SPA                              	// bullet >= 0, can't shoot
@1d9 41e0	///                       01d9 [41e0]: BUN 1e0   (       PC_LOAD_BULLET)
@1da 6334	///                       01da [6334]: ISZ 334   (        P_PC_BULLET_X)
@1db 6335	///                       01db [6335]: ISZ 335   (        P_PC_BULLET_Y)
@1dc 6337	///                       01dc [6337]: ISZ 337   (    P_PC_BULLET_SPEED)
@1dd 6381	///                       01dd [6381]: ISZ 381   (           CNT_BULLET)	// if can't find position, default action: goto KEEP 
@1de 41d7	///                       01de [41d7]: BUN 1d7   (       PC_FIND_BULLET)	// find next position for bullet
@1df 41ab	///                       01df [41ab]: BUN 1ab   (             PC_STT_3)
@1e0 2485	///       PC_LOAD_BULLET: 01e0 [2485]: LDA 485   (                 PC_X)
@1e1 b334	///                       01e1 [b334]: STA 334 I (        P_PC_BULLET_X)
@1e2 2486	///                       01e2 [2486]: LDA 486   (                 PC_Y)
@1e3 b335	///                       01e3 [b335]: STA 335 I (        P_PC_BULLET_Y)
@1e4 248a	///                       01e4 [248a]: LDA 48a   (             PC_SPEED)
@1e5 13ae	///                       01e5 [13ae]: ADD 3ae   (                  VM1)	// AC = MY_SPEED - 2
@1e6 7004	///                       01e6 [7004]: SZA                              
@1e7 41ec	///                       01e7 [41ec]: BUN 1ec   (           PC_SPEED_2)
@1e8 41e9	///                       01e8 [41e9]: BUN 1e9   (           PC_SPEED_1)
@1e9 23a3	///           PC_SPEED_1: 01e9 [23a3]: LDA 3a3   (                  VH1)
@1ea b337	///                       01ea [b337]: STA 337 I (    P_PC_BULLET_SPEED)	// MY_SPEED = 1, put 1 to the array
@1eb 41c8	///                       01eb [41c8]: BUN 1c8   (           SET_PC_MSG)
@1ec 23a4	///           PC_SPEED_2: 01ec [23a4]: LDA 3a4   (                  VH2)
@1ed b337	///                       01ed [b337]: STA 337 I (    P_PC_BULLET_SPEED)	// MY_SPEED >= 2
@1ee 23a3	///                       01ee [23a3]: LDA 3a3   (                  VH1)
@1ef 348a	///                       01ef [348a]: STA 48a   (             PC_SPEED)
@1f0 41c8	///                       01f0 [41c8]: BUN 1c8   (           SET_PC_MSG)
//////////// M[STT] = 3 : show my move  ///////////
@1f1 40ff	///                STT_3: 01f1 [40ff]: BUN 0ff   (         PRE_UPD_TURN)
//BSA UPD_TURN	/ call UPD_TURN (update turn)
//BUN PRP_OUT		/ goto PRP_OUT (prepare output)
//////////// M[STT] = 4 : end game  ///////////
@1f2 2355	///                STT_4: 01f2 [2355]: LDA 355   (               WINNER)	// AC         <- M[WINNER] 0 or 1 or 2
@1f3 13af	///                       01f3 [13af]: ADD 3af   (                  VM2)
@1f4 7010	///                       01f4 [7010]: SPA                              
@1f5 41fa	///                       01f5 [41fa]: BUN 1fa   (              WHO_WON)	// BUN WHO_WON (who won??)
@1f6 41f7	///                       01f6 [41f7]: BUN 1f7   (                  TIE)	// WINNER = 2, tie	
@1f7 2423	///                  TIE: 01f7 [2423]: LDA 423   (             A_MG_TIE)	// AC         <- M[A_MG_TIE] (MG_TIE : "it's a tie")
@1f8 3205	///                       01f8 [3205]: STA 205   (               RESULT)	// M[RESULT]  <- "it's a tie"
@1f9 4203	///                       01f9 [4203]: BUN 203   (              STT_4_1)	// goto STT_4_1
@1fa 2487	///              WHO_WON: 01fa [2487]: LDA 487   (               MY_WIN)
@1fb 7004	///                       01fb [7004]: SZA                              
@1fc 41fe	///                       01fc [41fe]: BUN 1fe   (               MY_WON)	// my_win = 1
@1fd 4201	///                       01fd [4201]: BUN 201   (               PC_WON)	// my_win = 0
@1fe 2411	///               MY_WON: 01fe [2411]: LDA 411   (             A_MG_YWN)	// AC         <- M[A_MG_YWN] (MG_YWN : "you win!")
@1ff 3205	///                       01ff [3205]: STA 205   (               RESULT)	// M[RESULT]  <- "you win!"
@200 4203	///                       0200 [4203]: BUN 203   (              STT_4_1)	// goto STT_4_1
@201 241b	///               PC_WON: 0201 [241b]: LDA 41b   (             A_MG_IWN)	// AC         <- M[A_MG_IWN] (MG_IWN : "I win!")
@202 3205	///                       0202 [3205]: STA 205   (               RESULT)	// M[RESULT]  <- "I win!"
@203 23a4	///              STT_4_1: 0203 [23a4]: LDA 3a4   (                  VH2)	// AC         <- 2
@204 52e1	///                       0204 [52e1]: BSA 2e1   (               SET_ML)	// call SET_ML (set message list)
@205 0000	///               RESULT: 0205 [0000]: (    0:    0)                      	// (arg1) "you win!" or "I win!" or "it's a tie..."
@206 0440	///                       0206 [0440]: ( 1088: 1088)                      
@207 23a3	///                       0207 [23a3]: LDA 3a3   (                  VH1)	// AC         <- 1
@208 3345	///                       0208 [3345]: STA 345   (              NXT_INP)	// M[INP]     <- 1
@209 7800	///                       0209 [7800]: CLA                              	// AC         <- 0
@20a 3343	///                       020a [3343]: STA 343   (              NXT_STT)	// M[NXT_STT] <- 0
@20b 4047	///                       020b [4047]: BUN 047   (              PRP_OUT)	// goto PRP_OUT (prepare output)
@20c 0000	///            SHOW_GAME: 020c [0000]: (    0:    0)                      	// return address
//////////// subroutine (show game)  ///////////
@20d 2356	///                       020d [2356]: LDA 356   (                A_BRD)	// AC        <- M[A_BRD] (BRD)
@20e 332e	///                       020e [332e]: STA 32e   (                P_BRD)	// M[P_BRD]  <- BRD + 1
@20f 2468	///                       020f [2468]: LDA 468   (             A_MG_BRD)	// AC        <- M[A_MG_BRD] (MG_BRD)
@210 7020	///                       0210 [7020]: INC                              	// AC        <- MG_BRD + 1
@211 3326	///                       0211 [3326]: STA 326   (               PTR_MG)	// M[PTR_MG] <- MG_BRD + 1
@212 23b2	///                       0212 [23b2]: LDA 3b2   (                  VM5)	// AC        <- -5  print 5 lines
@213 3327	///                       0213 [3327]: STA 327   (                CNT_1)	// M[CNT_1]  <- -5
@214 23ba	///                       0214 [23ba]: LDA 3ba   (                 CH_1)	// AC        <- '1'
@215 3321	///                       0215 [3321]: STA 321   (                  TMA)	// M[TMA]    <- '1'
// loop print board
@216 5235	///             L_PUT_BD: 0216 [5235]: BSA 235   (              PRT_BRD)	// call PRT_BRD (print board)
@217 5235	///                       0217 [5235]: BSA 235   (              PRT_BRD)	// call PRT_BRD (print board)
@218 5235	///                       0218 [5235]: BSA 235   (              PRT_BRD)	// call PRT_BRD (print board)
@219 5235	///                       0219 [5235]: BSA 235   (              PRT_BRD)	// call PRT_BRD (print board)
@21a 6326	///                       021a [6326]: ISZ 326   (               PTR_MG)	// ++M[PTR_MG] : skip newline position on BD_MG
@21b 6327	///                       021b [6327]: ISZ 327   (                CNT_1)	// ((++M[CNT_1]) == 0) ? skip next
@21c 4216	///                       021c [4216]: BUN 216   (             L_PUT_BD)	// goto L_PUT_BD (loop print board)
// check winner
@21d 2355	///                       021d [2355]: LDA 355   (               WINNER)	// AC <- M[WINNER]
@21e 7004	///                       021e [7004]: SZA                              	// (M[WINNER] == 0) ? skip next
@21f 422c	///                       021f [422c]: BUN 22c   (           SET_GM_OVR)	// goto SET_GM_OVR (M[WINNER] != 0)
@220 2353	///                       0220 [2353]: LDA 353   (              CNT_MOV)	// AC <- M[CNT_MOV]
@221 7008	///                       0221 [7008]: SNA                              	// (M[CNT_MOV] < 0) ? skip next
@222 422c	///                       0222 [422c]: BUN 22c   (           SET_GM_OVR)	// goto SET_GM_OVR (M[CNT_MOV] == 0)
// set NXT_MV ("your move!" or "my move!")
@223 2354	///                       0223 [2354]: LDA 354   (                 TURN)	// AC <- M[TURN]
@224 7004	///                       0224 [7004]: SZA                              	// (M[TURN] == 0) ? skip next
@225 4229	///                       0225 [4229]: BUN 229   (              SET_MMV)	// goto SET_MMV
// set "your move!"
@226 23ef	///                       0226 [23ef]: LDA 3ef   (             A_MG_YMV)	// AC <- M[A_MG_YMV] (MG_YMV: "your move!")
@227 3233	///                       0227 [3233]: STA 233   (               NXT_MV)	// M[NXT_MV] <- "your move!"
@228 422e	///                       0228 [422e]: BUN 22e   (           SET_MG_BRD)	// goto SET_MG_BRD
// set "my move!"
@229 23fb	///              SET_MMV: 0229 [23fb]: LDA 3fb   (             A_MG_MMV)	// AC <- M[A_MG_MMV] (MG_MMV: "my move!")
@22a 3233	///                       022a [3233]: STA 233   (               NXT_MV)	// M[NXT_MV] <- "your move!"
@22b 422e	///                       022b [422e]: BUN 22e   (           SET_MG_BRD)	// goto SET_MG_BRD
// set "game over!"
@22c 2405	///           SET_GM_OVR: 022c [2405]: LDA 405   (             A_MG_GMO)	// AC <- M[A_MG_GMO] (MG_GMO: "game over!")
@22d 3233	///                       022d [3233]: STA 233   (               NXT_MV)	// M[NXT_MV] <- "game over!"
// set MG_BRD
@22e 23a7	///           SET_MG_BRD: 022e [23a7]: LDA 3a7   (                  VH4)	// AC <- 4
@22f 52e1	///                       022f [52e1]: BSA 2e1   (               SET_ML)	// call SET_ML (set message list)
@230 0463	///                       0230 [0463]: ( 1123: 1123)                      
@231 0469	///                       0231 [0469]: ( 1129: 1129)                      
@232 0463	///                       0232 [0463]: ( 1123: 1123)                      
@233 0000	///               NXT_MV: 0233 [0000]: (    0:    0)                      	// (arg4) "your move!" or "my move!" or "game over!"
@234 c20c	///                       0234 [c20c]: BUN 20c I (            SHOW_GAME)	// return from SHOW_GAME
@235 0000	///              PRT_BRD: 0235 [0000]: (    0:    0)                      	// return address
//////////// subroutine (print board)  ///////////
@236 a32e	///                       0236 [a32e]: LDA 32e I (                P_BRD)	// AC           <- M[M[P_BRD]]
@237 7004	///                       0237 [7004]: SZA                              	// (AC == 0) ? skip next
@238 4239	///                       0238 [4239]: BUN 239   (               CPY_BD)	// goto CPY_BD
//LDA TMA			/ AC           <- M[TMA]
@239 b326	///               CPY_BD: 0239 [b326]: STA 326 I (               PTR_MG)	// M[M[PTR_MG]] <- AC
@23a 6326	///                       023a [6326]: ISZ 326   (               PTR_MG)	// ++M[PTR_MG]
@23b 632e	///                       023b [632e]: ISZ 32e   (                P_BRD)	// ++M[P_BRD]
@23c 6321	///                       023c [6321]: ISZ 321   (                  TMA)	// ++M[TMA]
@23d c235	///                       023d [c235]: BUN 235 I (              PRT_BRD)	// return from PRT_BRD
@23e 0000	///             UPD_TURN: 023e [0000]: (    0:    0)                      
//////////// subroutine (update turn)  ///////////
@23f 2354	///                       023f [2354]: LDA 354   (                 TURN)	// AC         <- M[TURN]
@240 7200	///                       0240 [7200]: CMA                              	// AC         <- - M[TURN] - 1
@241 7020	///                       0241 [7020]: INC                              	// AC         <- - M[TURN]
@242 7020	///                       0242 [7020]: INC                              	// AC         <- 1 - M[TURN]
@243 3354	///                       0243 [3354]: STA 354   (                 TURN)	// M[TURN]    <- 1 - M[TURN]
@244 5258	///                       0244 [5258]: BSA 258   (              CHK_WIN)	// call CHK_WIN
@245 7004	///                       0245 [7004]: SZA                              	// (AC == 0) ? skip next (AC = WINNER)
@246 4249	///                       0246 [4249]: BUN 249   (             END_TURN)	// goto END_TURN (winner mark != 0)
@247 6353	///                       0247 [6353]: ISZ 353   (              CNT_MOV)	// ((++M[CNT_MOV]) == 0) ? skip next
@248 424d	///                       0248 [424d]: BUN 24d   (             NXT_TURN)	// goto NXT_TURN
@249 23a7	///             END_TURN: 0249 [23a7]: LDA 3a7   (                  VH4)	// AC         <- 4
@24a 3343	///                       024a [3343]: STA 343   (              NXT_STT)	// M[NXT_STT] <- 4 (next state : end game)
@24b 520c	///                       024b [520c]: BSA 20c   (            SHOW_GAME)	// call SHOW_GAME
@24c c23e	///                       024c [c23e]: BUN 23e I (             UPD_TURN)	// return from UPD_TURN
@24d 504a	///             NXT_TURN: 024d [504a]: BSA 04a   (             PRP_TURN)	// call PRP_TURN (prepare next turn)
@24e 520c	///                       024e [520c]: BSA 20c   (            SHOW_GAME)	// call SHOW_GAME
@24f c23e	///                       024f [c23e]: BUN 23e I (             UPD_TURN)	// return from UPD_TURN
@250 0000	///               CHK_CH: 0250 [0000]: (    0:    0)                      	// return address
/////////// subroutine (check character) ///////////
// arg0 (AC) : character to identify
// return AC = 1 : character matched
// return AC = 0 : character not matched
@251 7200	///                       0251 [7200]: CMA                              	// AC <- ~AC
@252 7020	///                       0252 [7020]: INC                              	// AC <- AC + 1 (AC = - arg0)
@253 1323	///                       0253 [1323]: ADD 323   (                  TMI)	// AC <- AC + M[TMI] (M[TMI] - arg0)
@254 7004	///                       0254 [7004]: SZA                              	// (M[TMI] = arg0) ? skip next
@255 23ae	///                       0255 [23ae]: LDA 3ae   (                  VM1)	// AC <- M[VM1] (-1) (no match)
@256 7020	///                       0256 [7020]: INC                              	// AC <- AC + 1
@257 c250	///                       0257 [c250]: BUN 250 I (               CHK_CH)	// return from CHK_CH
@258 0000	///              CHK_WIN: 0258 [0000]: (    0:    0)                      
//////////// subroutine (check winner)  ///////////
// return AC (winner) : 'O' or 'X' or 0 (no winner)
@259 2382	///                       0259 [2382]: LDA 382   (        A_MY_BULLET_X)
@25a 3332	///                       025a [3332]: STA 332   (        P_MY_BULLET_X)
@25b 2387	///                       025b [2387]: LDA 387   (        A_MY_BULLET_Y)
@25c 3333	///                       025c [3333]: STA 333   (        P_MY_BULLET_Y)
@25d 2380	///                       025d [2380]: LDA 380   (         TOTAL_BULLET)
@25e 7200	///                       025e [7200]: CMA                              
@25f 7020	///                       025f [7020]: INC                              
@260 3381	///                       0260 [3381]: STA 381   (           CNT_BULLET)
@261 a332	///           CHK_MY_WIN: 0261 [a332]: LDA 332 I (        P_MY_BULLET_X)
@262 7004	///                       0262 [7004]: SZA                              
@263 426d	///                       0263 [426d]: BUN 26d   (       CHK_NXT_MY_WIN)	// X != 0 check next bullet
@264 a333	///                       0264 [a333]: LDA 333 I (        P_MY_BULLET_Y)	// X = 0
@265 7200	///                       0265 [7200]: CMA                              
@266 7020	///                       0266 [7020]: INC                              
@267 1486	///                       0267 [1486]: ADD 486   (                 PC_Y)
@268 7004	///                       0268 [7004]: SZA                              
@269 426d	///                       0269 [426d]: BUN 26d   (       CHK_NXT_MY_WIN)
@26a 23a3	///                       026a [23a3]: LDA 3a3   (                  VH1)	// y coordinate of bullet is equal 0, my win!!
@26b 3487	///                       026b [3487]: STA 487   (               MY_WIN)
@26c 4271	///                       026c [4271]: BUN 271   (       PRP_CHK_PC_WIN)	// prepare to check whether pc wins
@26d 6332	///       CHK_NXT_MY_WIN: 026d [6332]: ISZ 332   (        P_MY_BULLET_X)
@26e 6333	///                       026e [6333]: ISZ 333   (        P_MY_BULLET_Y)
@26f 6381	///                       026f [6381]: ISZ 381   (           CNT_BULLET)
@270 4261	///                       0270 [4261]: BUN 261   (           CHK_MY_WIN)
@271 2391	///       PRP_CHK_PC_WIN: 0271 [2391]: LDA 391   (        A_PC_BULLET_X)
@272 3334	///                       0272 [3334]: STA 334   (        P_PC_BULLET_X)
@273 2396	///                       0273 [2396]: LDA 396   (        A_PC_BULLET_Y)
@274 3335	///                       0274 [3335]: STA 335   (        P_PC_BULLET_Y)
@275 2380	///                       0275 [2380]: LDA 380   (         TOTAL_BULLET)
@276 7200	///                       0276 [7200]: CMA                              
@277 7020	///                       0277 [7020]: INC                              
@278 3381	///                       0278 [3381]: STA 381   (           CNT_BULLET)
@279 a334	///           CHK_PC_WIN: 0279 [a334]: LDA 334 I (        P_PC_BULLET_X)
@27a 13b1	///                       027a [13b1]: ADD 3b1   (                  VM4)
@27b 7010	///                       027b [7010]: SPA                              
@27c 4286	///                       027c [4286]: BUN 286   (       CHK_NXT_PC_WIN)	// x of PC's bulltet is less than 4, check next bullet
@27d a335	///                       027d [a335]: LDA 335 I (        P_PC_BULLET_Y)	// x >= 4, check y coordinate
@27e 7200	///                       027e [7200]: CMA                              
@27f 7020	///                       027f [7020]: INC                              
@280 1484	///                       0280 [1484]: ADD 484   (                 MY_Y)
@281 7004	///                       0281 [7004]: SZA                              
@282 4286	///                       0282 [4286]: BUN 286   (       CHK_NXT_PC_WIN)
@283 23a3	///                       0283 [23a3]: LDA 3a3   (                  VH1)	// y coordinate of bullet is equal to my_y, pc win!!
@284 3488	///                       0284 [3488]: STA 488   (               PC_WIN)
@285 428a	///                       0285 [428a]: BUN 28a   (         CHK_WIN_OVER)
@286 6334	///       CHK_NXT_PC_WIN: 0286 [6334]: ISZ 334   (        P_PC_BULLET_X)
@287 6335	///                       0287 [6335]: ISZ 335   (        P_PC_BULLET_Y)
@288 6381	///                       0288 [6381]: ISZ 381   (           CNT_BULLET)
@289 4279	///                       0289 [4279]: BUN 279   (           CHK_PC_WIN)
@28a 2488	///         CHK_WIN_OVER: 028a [2488]: LDA 488   (               PC_WIN)
@28b 1487	///                       028b [1487]: ADD 487   (               MY_WIN)
@28c 3355	///                       028c [3355]: STA 355   (               WINNER)	// WINNER = 0, no one wins, WINNER = 1, at least one wins, WINNER = 2, tie(my win and pc win)
@28d c258	///                       028d [c258]: BUN 258 I (              CHK_WIN)
@28e 0000	///               MY_MOV: 028e [0000]: (    0:    0)                      
/////////// subroutine (my move) //////////
@28f 5294	///                       028f [5294]: BSA 294   (                 RAND)
@290 7800	///                       0290 [7800]: CLA                              
@291 248c	///                       0291 [248c]: LDA 48c   (                 SEED)
@292 348b	///                       0292 [348b]: STA 48b   (            PC_ACTION)
@293 c28e	///                       0293 [c28e]: BUN 28e I (               MY_MOV)	// return from MY_MOV
@294 0000	///                 RAND: 0294 [0000]: (    0:    0)                      
@295 7800	///                       0295 [7800]: CLA                              
@296 3494	///                       0296 [3494]: STA 494   (                    P)
@297 248c	///                       0297 [248c]: LDA 48c   (                 SEED)	// Load the seed
@298 3490	///                       0298 [3490]: STA 490   (                    X)
@299 248d	///                       0299 [248d]: LDA 48d   (           MULTIPLIER)	// Multiply by A
@29a 3491	///                       029a [3491]: STA 491   (                    Y)
@29b 52a4	///                       029b [52a4]: BSA 2a4   (                  MUL)
@29c 7800	///                       029c [7800]: CLA                              
@29d 2494	///                       029d [2494]: LDA 494   (                    P)
@29e 148e	///                       029e [148e]: ADD 48e   (                CONST)	// Add Const
@29f 3494	///                       029f [3494]: STA 494   (                    P)
@2a0 52b7	///                       02a0 [52b7]: BSA 2b7   (               DIVIDE)	// Modulo M
@2a1 2496	///                       02a1 [2496]: LDA 496   (                    R)
@2a2 348c	///                       02a2 [348c]: STA 48c   (                 SEED)
@2a3 c294	///                       02a3 [c294]: BUN 294 I (                 RAND)	// Return
@2a4 0000	///                  MUL: 02a4 [0000]: (    0:    0)                      
@2a5 7400	///              MUL_SUB: 02a5 [7400]: CLE                              	// E <- 0
@2a6 2491	///                       02a6 [2491]: LDA 491   (                    Y)	// AC <- M[Y]
@2a7 7004	///                       02a7 [7004]: SZA                              	// (AC == 0) ? skip next
@2a8 42aa	///                       02a8 [42aa]: BUN 2aa   (                   LY)	// goto LY
@2a9 c2a4	///                       02a9 [c2a4]: BUN 2a4 I (                  MUL)
// M[Y] >>= 1
@2aa 7080	///                   LY: 02aa [7080]: CIR                              	// {AC[15:0], E} <- {E, AC[15:0]}
@2ab 3491	///                       02ab [3491]: STA 491   (                    Y)	// M[Y] <- AC
@2ac 7002	///                       02ac [7002]: SZE                              	// (E == 0) ? skip next
@2ad 42b2	///                       02ad [42b2]: BUN 2b2   (                   LP)	// goto LP
// M[X] <<= 1
@2ae 2490	///                   LX: 02ae [2490]: LDA 490   (                    X)	// AC <- M[X]
@2af 7040	///                       02af [7040]: CIL                              	// {E, AC[15:0]} <- {AC[15:0], E}
@2b0 3490	///                       02b0 [3490]: STA 490   (                    X)	// M[X] <- AC
@2b1 42a5	///                       02b1 [42a5]: BUN 2a5   (              MUL_SUB)	// goto LO
// M[P] += M[X]
@2b2 2490	///                   LP: 02b2 [2490]: LDA 490   (                    X)	// AC <- M[X]
@2b3 1494	///                       02b3 [1494]: ADD 494   (                    P)	// AC <- AC + M[P]
@2b4 3494	///                       02b4 [3494]: STA 494   (                    P)	// M[P} <- AC
@2b5 7400	///                       02b5 [7400]: CLE                              	// E <- 0
@2b6 42ae	///                       02b6 [42ae]: BUN 2ae   (                   LX)	// goto LX
@2b7 0000	///               DIVIDE: 02b7 [0000]: (    0:    0)                      
@2b8 7800	///                       02b8 [7800]: CLA                              
@2b9 3497	///                       02b9 [3497]: STA 497   (                    Q)
@2ba 3496	///                       02ba [3496]: STA 496   (                    R)
@2bb 2494	///                       02bb [2494]: LDA 494   (                    P)
@2bc 3492	///                       02bc [3492]: STA 492   (                    A)
@2bd 2498	///                       02bd [2498]: LDA 498   (                K_INI)
@2be 3499	///                       02be [3499]: STA 499   (                    K)
@2bf 248f	///                       02bf [248f]: LDA 48f   (                  MOD)
@2c0 7200	///                       02c0 [7200]: CMA                              
@2c1 7020	///                       02c1 [7020]: INC                              
@2c2 3495	///                       02c2 [3495]: STA 495   (                   NB)
@2c3 7400	///                 LSUB: 02c3 [7400]: CLE                              
@2c4 2492	///                       02c4 [2492]: LDA 492   (                    A)
@2c5 7040	///                       02c5 [7040]: CIL                              
@2c6 3492	///                       02c6 [3492]: STA 492   (                    A)
@2c7 2496	///                       02c7 [2496]: LDA 496   (                    R)
@2c8 7040	///                       02c8 [7040]: CIL                              
@2c9 3496	///                       02c9 [3496]: STA 496   (                    R)
@2ca 1495	///                       02ca [1495]: ADD 495   (                   NB)
@2cb 7008	///                       02cb [7008]: SNA                              
@2cc 3496	///                       02cc [3496]: STA 496   (                    R)
@2cd 2497	///                       02cd [2497]: LDA 497   (                    Q)
@2ce 7040	///                       02ce [7040]: CIL                              
@2cf 3497	///                       02cf [3497]: STA 497   (                    Q)
@2d0 6499	///                       02d0 [6499]: ISZ 499   (                    K)
@2d1 42c3	///                       02d1 [42c3]: BUN 2c3   (                 LSUB)
@2d2 c2b7	///                       02d2 [c2b7]: BUN 2b7 I (               DIVIDE)
@2d3 0000	///              SET_MGP: 02d3 [0000]: (    0:    0)                      
/////////// subroutine (set single message for P_OUT) //////////
// arg(1) : message address
@2d4 7800	///                       02d4 [7800]: CLA                              	// AC <- 0
@2d5 7200	///                       02d5 [7200]: CMA                              	// AC <- -1
@2d6 3346	///                       02d6 [3346]: STA 346   (               CNT_MG)	// M[CNT_MG]      <- - 1 (message count = 1)
@2d7 2348	///                       02d7 [2348]: LDA 348   (             A_MG_LST)	// AC             <- M[A_MG_LST] (MG_LIST)
@2d8 3347	///                       02d8 [3347]: STA 347   (             P_MG_LST)	// M[P_MG_LST]    <- MG_LIST
@2d9 a2d3	///                       02d9 [a2d3]: LDA 2d3 I (              SET_MGP)	// AC             <- M[M[SET_MGP]] (arg(i))
@2da b347	///                       02da [b347]: STA 347 I (             P_MG_LST)	// M[MG_LIST]     <- arg(1)
// load 1st message
@2db 52fa	///                       02db [52fa]: BSA 2fa   (               LD_MSG)	// call LD_MSG (load message info)
// output to P_OUT
@2dc f010	///                       02dc [f010]: PIO                              	// IOT <- 0 (parallel-IO selected)
@2dd 23a3	///                       02dd [23a3]: LDA 3a3   (                  VH1)	// AC <- 1
@2de f008	///                       02de [f008]: IMK                              	// IMSK <- 0001 (P_OUT enabled)
@2df 62d3	///                       02df [62d3]: ISZ 2d3   (              SET_MGP)	// ++M[SET_MGP]
@2e0 c2d3	///                       02e0 [c2d3]: BUN 2d3 I (              SET_MGP)	// return from SET_MGP
@2e1 0000	///               SET_ML: 02e1 [0000]: (    0:    0)                      
/////////// subroutine (set message list for S_OUT) //////////
// arg0 (AC) : msg_count
// arg(1), arg(2), ... : message addresses (# of arguments = msg_count)
@2e2 7020	///                       02e2 [7020]: INC                              	// AC             <- (msg_count + 1)
@2e3 7200	///                       02e3 [7200]: CMA                              	// AC             <- - (msg_count + 2)
@2e4 3346	///                       02e4 [3346]: STA 346   (               CNT_MG)	// M[CNT_MG]      <- - (msg_count + 2) (2 newlines)
@2e5 7020	///                       02e5 [7020]: INC                              
@2e6 7020	///                       02e6 [7020]: INC                              
@2e7 3321	///                       02e7 [3321]: STA 321   (                  TMA)	// M[TMA]         <- - msg_count
@2e8 2348	///                       02e8 [2348]: LDA 348   (             A_MG_LST)	// AC             <- M[A_MG_LST] (MG_LIST)
@2e9 3347	///                       02e9 [3347]: STA 347   (             P_MG_LST)	// M[P_MG_LST]    <- MG_LIST
@2ea 3322	///                       02ea [3322]: STA 322   (                  TMB)	// M[TMB]         <- MG_LIST
// put 1st newline at head
@2eb 23e3	///                       02eb [23e3]: LDA 3e3   (              A_MG_NL)	// AC             <- M[A_MG_NL] (MG_NL)
@2ec b322	///                       02ec [b322]: STA 322 I (                  TMB)	// M[M[TMB]]      <- MG_NL
@2ed 6322	///                       02ed [6322]: ISZ 322   (                  TMB)	// ++M[TMB]
// loop set message : i = 1, 2, ..., msg_count
@2ee a2e1	///             L_SET_ML: 02ee [a2e1]: LDA 2e1 I (               SET_ML)	// AC             <- M[M[SET_ML]] (arg(i))
@2ef b322	///                       02ef [b322]: STA 322 I (                  TMB)	// M[MG_LIST + i] <- arg(i)
@2f0 62e1	///                       02f0 [62e1]: ISZ 2e1   (               SET_ML)	// ++M[SET_ML]
@2f1 6322	///                       02f1 [6322]: ISZ 322   (                  TMB)	// ++M[TMB]
@2f2 6321	///                       02f2 [6321]: ISZ 321   (                  TMA)	// ((++M[TMA]) == 0) ? skip next
@2f3 42ee	///                       02f3 [42ee]: BUN 2ee   (             L_SET_ML)	// goto L_SET_ML (loop set message)
// put 2nd newline at head
@2f4 23e3	///                       02f4 [23e3]: LDA 3e3   (              A_MG_NL)	// AC             <- M[A_MG_NL] (MG_NL)
@2f5 b322	///                       02f5 [b322]: STA 322 I (                  TMB)	// M[MG_LIST + msg_count + 1] <- MG_NL
// load 1st message
@2f6 52fa	///                       02f6 [52fa]: BSA 2fa   (               LD_MSG)	// call LD_MSG (load message info)
// output to S_OUT
@2f7 23a7	///                       02f7 [23a7]: LDA 3a7   (                  VH4)	// AC <- 4
@2f8 f008	///                       02f8 [f008]: IMK                              	// IMSK <- 0100 (S_OUT enabled)
@2f9 c2e1	///                       02f9 [c2e1]: BUN 2e1 I (               SET_ML)	// return from SET_ML
@2fa 0000	///               LD_MSG: 02fa [0000]: (    0:    0)                      
/////////// subroutine (load message info) //////////
@2fb a347	///                       02fb [a347]: LDA 347 I (             P_MG_LST)	// AC        <- M[M[P_MG_LST]] (message address)
@2fc 3326	///                       02fc [3326]: STA 326   (               PTR_MG)	// M[PTR_MG] <- M[M[P_MG_LST]] (message address)
@2fd a326	///                       02fd [a326]: LDA 326 I (               PTR_MG)	// AC        <- M[M[PTR_MG]] (message length)
@2fe 7200	///                       02fe [7200]: CMA                              
@2ff 7020	///                       02ff [7020]: INC                              	// AC        <- - (message length)
@300 3329	///                       0300 [3329]: STA 329   (               CNT_CH)	// M[CNT_CH] <- message count
@301 6326	///                       0301 [6326]: ISZ 326   (               PTR_MG)	// ++M[PTR_MG] (message starts from the next address)
@302 6347	///                       0302 [6347]: ISZ 347   (             P_MG_LST)	// ++M[P_MG_LST]
@303 c2fa	///                       0303 [c2fa]: BUN 2fa I (               LD_MSG)	// return from SET_MSG
/////////// process output //////////
@304 f100	///              PUT_OUT: 0304 [f100]: SKO                              	// (FGO = 0) ? skip next
@305 4042	///                       0305 [4042]: BUN 042   (                  IRT)	// goto IRT (return from interrupt handler) --> this should not happen...
// output 1 message character at address M[PTR_MG]
@306 a326	///                       0306 [a326]: LDA 326 I (               PTR_MG)	// AC   <- M[M[PTR_MG]]
@307 f400	///                       0307 [f400]: OUT                              	// OUTR <- AC(7:0)
@308 6326	///                       0308 [6326]: ISZ 326   (               PTR_MG)	// ++M[PTR_MG]
@309 6329	///                       0309 [6329]: ISZ 329   (               CNT_CH)	// ((++M[CNT_CH]) == 0) ? skip next
// message string pending ...
@30a 4042	///                       030a [4042]: BUN 042   (                  IRT)	// goto IRT (return from interrupt handler)
// message string terminated
@30b 6346	///                       030b [6346]: ISZ 346   (               CNT_MG)	// ((++M[CNT_MG]) = 0) ? skip next
@30c 431a	///                       030c [431a]: BUN 31a   (              NXT_MSG)	// goto NXT_MSG (load next message)
// all message processed
@30d 7800	///                       030d [7800]: CLA                              	// AC         <- 0
@30e 3344	///                       030e [3344]: STA 344   (              OUT_STT)	// M[OUT_STT] <- 0
@30f 2343	///                       030f [2343]: LDA 343   (              NXT_STT)	// AC         <- M[NXT_STT]
@310 3342	///                       0310 [3342]: STA 342   (                  STT)	// M[STT]     <- M[NXT_STT]
@311 f020	///                       0311 [f020]: SIO                              	// IOT <- 1 (serial-IO selected)
@312 2341	///                       0312 [2341]: LDA 341   (              NXT_BYE)	// AC         <- M[NXT_BYE]
@313 3340	///                       0313 [3340]: STA 340   (                  BYE)	// M[BYE]     <- M[NXT_BYE]
@314 7004	///                       0314 [7004]: SZA                              	// (AC = 0) ? skip next
@315 431c	///                       0315 [431c]: BUN 31c   (              CHG_INP)	// goto CHG_INP (M[BYE] = 1 : prepare to terminate program...)
@316 2345	///                       0316 [2345]: LDA 345   (              NXT_INP)	// AC <- M[NXT_INP]
@317 7004	///                       0317 [7004]: SZA                              	// (AC = 0) ? skip next
@318 431c	///                       0318 [431c]: BUN 31c   (              CHG_INP)	// goto CHG_INP (M[NXT_INP] = 1 : change to input mode)
@319 402f	///                       0319 [402f]: BUN 02f   (               STT_SW)	// goto STT_SW (state switch)
// load next message
@31a 52fa	///              NXT_MSG: 031a [52fa]: BSA 2fa   (               LD_MSG)	// call LD_MSG (load message info)
@31b 4042	///                       031b [4042]: BUN 042   (                  IRT)	// goto IRT (return from interrupt handler)
// change to input mode
@31c 7800	///              CHG_INP: 031c [7800]: CLA                              	// AC         <- 0
@31d 3345	///                       031d [3345]: STA 345   (              NXT_INP)	// M[NXT_INP] <- 0
@31e 23a9	///                       031e [23a9]: LDA 3a9   (                  VH8)	// AC         <- 8
@31f f008	///                       031f [f008]: IMK                              	// IMSK       <- 1000 (S_IN enabled)
@320 4042	///                       0320 [4042]: BUN 042   (                  IRT)	// goto IRT (return from interrupt handler)
// data (no initialization)
@321 0000	///                  TMA: 0321 [0000]: (    0:    0)                      	// temporal
@322 0000	///                  TMB: 0322 [0000]: (    0:    0)                      	// temporal
@323 0000	///                  TMI: 0323 [0000]: (    0:    0)                      	// char (raw) input
@324 0000	///                   BA: 0324 [0000]: (    0:    0)                      	// backup storage for AC during interrupt handling
@325 0000	///                   BE: 0325 [0000]: (    0:    0)                      	// backup storage for  E during interrupt handling
@326 0000	///               PTR_MG: 0326 [0000]: (    0:    0)                      	// message pointer
@327 0000	///                CNT_1: 0327 [0000]: (    0:    0)                      	// counter 1
@328 0000	///                CNT_2: 0328 [0000]: (    0:    0)                      	// counter 2
@329 0000	///               CNT_CH: 0329 [0000]: (    0:    0)                      	// char counter
@32a 0000	///             CNT_MOVE: 032a [0000]: (    0:    0)                      	// where to put M
@32b 0000	///       CNT_CLR_BULLET: 032b [0000]: (    0:    0)                      
@32c 0000	///      CNT_FIND_BULLET: 032c [0000]: (    0:    0)                      
@32d fffe	///             CNT_TURN: 032d [fffe]: (   -2:65534)                      
@32e 0000	///                P_BRD: 032e [0000]: (    0:    0)                      	// pointer to BRD
@32f 0000	///             P_MY_LNC: 032f [0000]: (    0:    0)                      	// pointer to MY_LNC
@330 0000	///             P_YR_LNC: 0330 [0000]: (    0:    0)                      	// pointer to YR_LNC
@331 0000	///            P_INI_BRD: 0331 [0000]: (    0:    0)                      	// pointer to INI_BRD   
@332 0000	///        P_MY_BULLET_X: 0332 [0000]: (    0:    0)                      	// pointer to MY_BULLET_X
@333 0000	///        P_MY_BULLET_Y: 0333 [0000]: (    0:    0)                      	// pointer to MY_BULLET_Y
@334 0000	///        P_PC_BULLET_X: 0334 [0000]: (    0:    0)                      	// pointer to PC_BULLET_X
@335 0000	///        P_PC_BULLET_Y: 0335 [0000]: (    0:    0)                      	// pointer to PC_BULLET_Y
@336 0000	///    P_MY_BULLET_SPEED: 0336 [0000]: (    0:    0)                      	//pointer to MY_BULLET_SPEED
@337 0000	///    P_PC_BULLET_SPEED: 0337 [0000]: (    0:    0)                      
@338 0000	///              BRD_OFS: 0338 [0000]: (    0:    0)                      	// BRD offset
@339 0000	///              BRD_POS: 0339 [0000]: (    0:    0)                      	// BRD pos
@33a 0000	///              N_P_BRD: 033a [0000]: (    0:    0)                      	// pointer to BRD for my next move
@33b 0000	///                BRD_1: 033b [0000]: (    0:    0)                      	// brd[pos1]
@33c 0000	///                BRD_2: 033c [0000]: (    0:    0)                      	// brd[pos2]
@33d 0000	///            BRD_SUM_N: 033d [0000]: (    0:    0)                      	// -(brd[pos1] + brd[pos2])
@33e 0000	///                MY_LN: 033e [0000]: (    0:    0)                      	// myLine
@33f 0000	///               MY_BLK: 033f [0000]: (    0:    0)                      	// myBlock
// data (need initialization code : one-time)
@340 0000	///                  BYE: 0340 [0000]: (    0:    0)                      	// (init: 0) bye
@341 0000	///              NXT_BYE: 0341 [0000]: (    0:    0)                      	// (init: 0) next bye
@342 0000	///                  STT: 0342 [0000]: (    0:    0)                      	// (init: 0) current state
@343 0000	///              NXT_STT: 0343 [0000]: (    0:    0)                      	// (init: 0) next state
@344 0000	///              OUT_STT: 0344 [0000]: (    0:    0)                      	// (init: 0) output state
@345 0000	///              NXT_INP: 0345 [0000]: (    0:    0)                      	// (init: 0) next process input
@346 0000	///               CNT_MG: 0346 [0000]: (    0:    0)                      	// message count
@347 0000	///             P_MG_LST: 0347 [0000]: (    0:    0)                      	// message list pointer
@348 0349	///             A_MG_LST: 0348 [0349]: (  841:  841)                      
@349 0000	///               MG_LST: 0349 [0000]: (    0:    0)                      	// message pointer list (up to 8+2 messages)
@34a 0000	///                       034a [0000]: (    0:    0)                      
@34b 0000	///                       034b [0000]: (    0:    0)                      
@34c 0000	///                       034c [0000]: (    0:    0)                      
@34d 0000	///                       034d [0000]: (    0:    0)                      
@34e 0000	///                       034e [0000]: (    0:    0)                      
@34f 0000	///                       034f [0000]: (    0:    0)                      
@350 0000	///                       0350 [0000]: (    0:    0)                      
@351 0000	///                       0351 [0000]: (    0:    0)                      
@352 0000	///                       0352 [0000]: (    0:    0)                      
// data (need initialization code : after every game -> INI_GM)
@353 0000	///              CNT_MOV: 0353 [0000]: (    0:    0)                      	// move counter
@354 0000	///                 TURN: 0354 [0000]: (    0:    0)                      	// 0 : your turn, 1 : my turn
@355 0000	///               WINNER: 0355 [0000]: (    0:    0)                      	// winner
// BRD : brd[9]
// position : on screen
//    012       123
//    345       456
//    678       789
@356 0357	///                A_BRD: 0356 [0357]: (  855:  855)                      
@357 004f	///                  BRD: 0357 [004f]: (   79:  'O')                      
@358 004f	///                       0358 [004f]: (   79:  'O')                      
@359 004f	///                       0359 [004f]: (   79:  'O')                      
@35a 0045	///                       035a [0045]: (   69:  'E')                      
@35b 002e	///                       035b [002e]: (   46:  '.')                      
@35c 002e	///                       035c [002e]: (   46:  '.')                      
@35d 002e	///                       035d [002e]: (   46:  '.')                      
@35e 002e	///                       035e [002e]: (   46:  '.')                      
@35f 002e	///                       035f [002e]: (   46:  '.')                      
@360 002e	///                       0360 [002e]: (   46:  '.')                      
@361 002e	///                       0361 [002e]: (   46:  '.')                      
@362 002e	///                       0362 [002e]: (   46:  '.')                      
@363 002e	///                       0363 [002e]: (   46:  '.')                      
@364 002e	///                       0364 [002e]: (   46:  '.')                      
@365 002e	///                       0365 [002e]: (   46:  '.')                      
@366 002e	///                       0366 [002e]: (   46:  '.')                      
@367 004f	///                       0367 [004f]: (   79:  'O')                      
@368 004d	///                       0368 [004d]: (   77:  'M')                      
@369 004f	///                       0369 [004f]: (   79:  'O')                      
@36a 004f	///                       036a [004f]: (   79:  'O')                      
@36b 036c	///            A_INI_BRD: 036b [036c]: (  876:  876)                      
@36c 004f	///              INI_BRD: 036c [004f]: (   79:  'O')                      
@36d 004f	///                       036d [004f]: (   79:  'O')                      
@36e 004f	///                       036e [004f]: (   79:  'O')                      
@36f 0045	///                       036f [0045]: (   69:  'E')                      
@370 002e	///                       0370 [002e]: (   46:  '.')                      
@371 002e	///                       0371 [002e]: (   46:  '.')                      
@372 002e	///                       0372 [002e]: (   46:  '.')                      
@373 002e	///                       0373 [002e]: (   46:  '.')                      
@374 002e	///                       0374 [002e]: (   46:  '.')                      
@375 002e	///                       0375 [002e]: (   46:  '.')                      
@376 002e	///                       0376 [002e]: (   46:  '.')                      
@377 002e	///                       0377 [002e]: (   46:  '.')                      
@378 002e	///                       0378 [002e]: (   46:  '.')                      
@379 002e	///                       0379 [002e]: (   46:  '.')                      
@37a 002e	///                       037a [002e]: (   46:  '.')                      
@37b 002e	///                       037b [002e]: (   46:  '.')                      
@37c 004f	///                       037c [004f]: (   79:  'O')                      
@37d 004d	///                       037d [004d]: (   77:  'M')                      
@37e 004f	///                       037e [004f]: (   79:  'O')                      
@37f 004f	///                       037f [004f]: (   79:  'O')                      
@380 0004	///         TOTAL_BULLET: 0380 [0004]: (    4:    4)                      
@381 0000	///           CNT_BULLET: 0381 [0000]: (    0:    0)                      	// control loop
@382 0383	///        A_MY_BULLET_X: 0382 [0383]: (  899:  899)                      
@383 ffff	///          MY_BULLET_X: 0383 [ffff]: (   -1:65535)                      
@384 ffff	///                       0384 [ffff]: (   -1:65535)                      
@385 ffff	///                       0385 [ffff]: (   -1:65535)                      
@386 ffff	///                       0386 [ffff]: (   -1:65535)                      
@387 0388	///        A_MY_BULLET_Y: 0387 [0388]: (  904:  904)                      
@388 ffff	///          MY_BULLET_Y: 0388 [ffff]: (   -1:65535)                      
@389 ffff	///                       0389 [ffff]: (   -1:65535)                      
@38a ffff	///                       038a [ffff]: (   -1:65535)                      
@38b ffff	///                       038b [ffff]: (   -1:65535)                      
@38c 038d	///    A_MY_BULLET_SPEED: 038c [038d]: (  909:  909)                      
@38d 0000	///      MY_BULLET_SPEED: 038d [0000]: (    0:    0)                      
@38e 0000	///                       038e [0000]: (    0:    0)                      
@38f 0000	///                       038f [0000]: (    0:    0)                      
@390 0000	///                       0390 [0000]: (    0:    0)                      
@391 0392	///        A_PC_BULLET_X: 0391 [0392]: (  914:  914)                      
@392 ffff	///          PC_BULLET_X: 0392 [ffff]: (   -1:65535)                      
@393 ffff	///                       0393 [ffff]: (   -1:65535)                      
@394 ffff	///                       0394 [ffff]: (   -1:65535)                      
@395 ffff	///                       0395 [ffff]: (   -1:65535)                      
@396 0397	///        A_PC_BULLET_Y: 0396 [0397]: (  919:  919)                      
@397 ffff	///          PC_BULLET_Y: 0397 [ffff]: (   -1:65535)                      
@398 ffff	///                       0398 [ffff]: (   -1:65535)                      
@399 ffff	///                       0399 [ffff]: (   -1:65535)                      
@39a ffff	///                       039a [ffff]: (   -1:65535)                      
@39b 039c	///    A_PC_BULLET_SPEED: 039b [039c]: (  924:  924)                      
@39c 0000	///      PC_BULLET_SPEED: 039c [0000]: (    0:    0)                      
@39d 0000	///                       039d [0000]: (    0:    0)                      
@39e 0000	///                       039e [0000]: (    0:    0)                      
@39f 0000	///                       039f [0000]: (    0:    0)                      
// data (read-only)
@3a0 fff0	///                  AMK: 03a0 [fff0]: (  -16:65520)                      	// AMK = FFF0 (and mask)
@3a1 000f	///                 AMKN: 03a1 [000f]: (   15:   15)                      	// AMKN = 000F (and mask negated)
@3a2 0001	///                  VD1: 03a2 [0001]: (    1:    1)                      
@3a3 0001	///                  VH1: 03a3 [0001]: (    1:    1)                      	// VH1 = 1
@3a4 0002	///                  VH2: 03a4 [0002]: (    2:    2)                      	// VH2 = 2
@3a5 0003	///                  VH3: 03a5 [0003]: (    3:    3)                      	// VH3 = 3
@3a6 0003	///                  VD3: 03a6 [0003]: (    3:    3)                      
@3a7 0004	///                  VH4: 03a7 [0004]: (    4:    4)                      	// VH4 = 4
@3a8 0005	///                  VH5: 03a8 [0005]: (    5:    5)                      	// VH5 = 5
@3a9 0008	///                  VH8: 03a9 [0008]: (    8:    8)                      	// VH8 = 8
@3aa 0012	///                 VH12: 03aa [0012]: (   18:   18)                      
@3ab 0004	///                  VD4: 03ab [0004]: (    4:    4)                      
@3ac 000f	///                 VD15: 03ac [000f]: (   15:   15)                      
@3ad 0010	///                 VD16: 03ad [0010]: (   16:   16)                      	// VD16 = 16   
@3ae ffff	///                  VM1: 03ae [ffff]: (   -1:65535)                      	// VM1 = -1
@3af fffe	///                  VM2: 03af [fffe]: (   -2:65534)                      	// VM2 = -2
@3b0 fffd	///                  VM3: 03b0 [fffd]: (   -3:65533)                      	// VM2 = -3
@3b1 fffc	///                  VM4: 03b1 [fffc]: (   -4:65532)                      	// VM2 = -4
@3b2 fffb	///                  VM5: 03b2 [fffb]: (   -5:65531)                      	// VM5 = -5
@3b3 fff8	///                  VM8: 03b3 [fff8]: (   -8:65528)                      	// VM2 = -8
@3b4 fff7	///                  VM9: 03b4 [fff7]: (   -9:65527)                      	// VM2 = -9
@3b5 fff6	///                 VM10: 03b5 [fff6]: (  -10:65526)                      	// VM10 = -10
@3b6 fff5	///                 VM11: 03b6 [fff5]: (  -11:65525)                      
@3b7 ffec	///                 VM20: 03b7 [ffec]: (  -20:65516)                      	// VM20 = -20
@3b8 ff9c	///                VM100: 03b8 [ff9c]: ( -100:65436)                      
@3b9 0030	///                 CH_0: 03b9 [0030]: (   48:  '0')                      
@3ba 0031	///                 CH_1: 03ba [0031]: (   49:  '1')                      
@3bb 0061	///                 CH_a: 03bb [0061]: (   97:  'a')                      
@3bc 0064	///                 CH_d: 03bc [0064]: (  100:  'd')                      
@3bd 006a	///                 CH_j: 03bd [006a]: (  106:  'j')                      
@3be 0073	///                 CH_s: 03be [0073]: (  115:  's')                      
@3bf 004d	///                 CH_M: 03bf [004d]: (   77:  'M')                      
@3c0 0045	///                 CH_E: 03c0 [0045]: (   69:  'E')                      
@3c1 002e	///               CH_DOT: 03c1 [002e]: (   46:  '.')                      
@3c2 004f	///                 CH_O: 03c2 [004f]: (   79:  'O')                      
@3c3 0049	///                 CH_I: 03c3 [0049]: (   73:  'I')                      
@3c4 0079	///                CH_LY: 03c4 [0079]: (  121:  'y')                      
@3c5 0058	///                MY_MK: 03c5 [0058]: (   88:  'X')                      
@3c6 004f	///                YR_MK: 03c6 [004f]: (   79:  'O')                      
@3c7 00b0	///              MY_MK_2: 03c7 [00b0]: (  176:  176)                      	// (0x58('X') * 2)
@3c8 009e	///              YR_MK_2: 03c8 [009e]: (  158:  158)                      	// (0x4F('O') * 2)
@3c9 0017	///              MG_WELC: 03c9 [0017]: (   23:   23)                      	// MG_WELC length
@3ca 0057	///                       03ca [0057]: (   87:  'W')                      
@3cb 0045	///                       03cb [0045]: (   69:  'E')                      
@3cc 004c	///                       03cc [004c]: (   76:  'L')                      
@3cd 0043	///                       03cd [0043]: (   67:  'C')                      
@3ce 004f	///                       03ce [004f]: (   79:  'O')                      
@3cf 004d	///                       03cf [004d]: (   77:  'M')                      
@3d0 0045	///                       03d0 [0045]: (   69:  'E')                      
@3d1 0020	///                       03d1 [0020]: (   32:  ' ')                      	// ' '
@3d2 0054	///                       03d2 [0054]: (   84:  'T')                      
@3d3 004f	///                       03d3 [004f]: (   79:  'O')                      
@3d4 0020	///                       03d4 [0020]: (   32:  ' ')                      	// ' '
@3d5 0042	///                       03d5 [0042]: (   66:  'B')                      
@3d6 0041	///                       03d6 [0041]: (   65:  'A')                      
@3d7 0054	///                       03d7 [0054]: (   84:  'T')                      
@3d8 0054	///                       03d8 [0054]: (   84:  'T')                      
@3d9 004c	///                       03d9 [004c]: (   76:  'L')                      
@3da 0045	///                       03da [0045]: (   69:  'E')                      
@3db 002d	///                       03db [002d]: (   45:  '-')                      
@3dc 0053	///                       03dc [0053]: (   83:  'S')                      
@3dd 0048	///                       03dd [0048]: (   72:  'H')                      
@3de 0049	///                       03de [0049]: (   73:  'I')                      
@3df 0050	///                       03df [0050]: (   80:  'P')                      
@3e0 0021	///                       03e0 [0021]: (   33:  '!')                      
@3e1 0001	///             MG_MY_MV: 03e1 [0001]: (    1:    1)                      	// MG_MY_MV length
@3e2 0000	///            MG_MY_MV0: 03e2 [0000]: (    0:    0)                      
@3e3 03e4	///              A_MG_NL: 03e3 [03e4]: (  996:  996)                      
@3e4 0001	///                MG_NL: 03e4 [0001]: (    1:    1)                      	// MG_NL length
@3e5 000a	///                       03e5 [000a]: (   10:   10)                      	// '\n'
@3e6 0008	///               MG_BYE: 03e6 [0008]: (    8:    8)                      	// MG_BYE length
@3e7 0062	///                       03e7 [0062]: (   98:  'b')                      
@3e8 0079	///                       03e8 [0079]: (  121:  'y')                      
@3e9 0065	///                       03e9 [0065]: (  101:  'e')                      
@3ea 002d	///                       03ea [002d]: (   45:  '-')                      
@3eb 0062	///                       03eb [0062]: (   98:  'b')                      
@3ec 0079	///                       03ec [0079]: (  121:  'y')                      
@3ed 0065	///                       03ed [0065]: (  101:  'e')                      
@3ee 0021	///                       03ee [0021]: (   33:  '!')                      
@3ef 03f0	///             A_MG_YMV: 03ef [03f0]: ( 1008: 1008)                      
@3f0 000a	///               MG_YMV: 03f0 [000a]: (   10:   10)                      	// MG_YMV length
@3f1 0079	///                       03f1 [0079]: (  121:  'y')                      
@3f2 006f	///                       03f2 [006f]: (  111:  'o')                      
@3f3 0075	///                       03f3 [0075]: (  117:  'u')                      
@3f4 0072	///                       03f4 [0072]: (  114:  'r')                      
@3f5 0020	///                       03f5 [0020]: (   32:  ' ')                      	// ' '
@3f6 006d	///                       03f6 [006d]: (  109:  'm')                      
@3f7 006f	///                       03f7 [006f]: (  111:  'o')                      
@3f8 0076	///                       03f8 [0076]: (  118:  'v')                      
@3f9 0065	///                       03f9 [0065]: (  101:  'e')                      
@3fa 0021	///                       03fa [0021]: (   33:  '!')                      
@3fb 03fc	///             A_MG_MMV: 03fb [03fc]: ( 1020: 1020)                      
@3fc 0008	///               MG_MMV: 03fc [0008]: (    8:    8)                      	// MG_MMV length
@3fd 006d	///                       03fd [006d]: (  109:  'm')                      
@3fe 0079	///                       03fe [0079]: (  121:  'y')                      
@3ff 0020	///                       03ff [0020]: (   32:  ' ')                      	// ' '
@400 006d	///                       0400 [006d]: (  109:  'm')                      
@401 006f	///                       0401 [006f]: (  111:  'o')                      
@402 0076	///                       0402 [0076]: (  118:  'v')                      
@403 0065	///                       0403 [0065]: (  101:  'e')                      
@404 0021	///                       0404 [0021]: (   33:  '!')                      
@405 0406	///             A_MG_GMO: 0405 [0406]: ( 1030: 1030)                      
@406 000a	///               MG_GMO: 0406 [000a]: (   10:   10)                      	// MG_GMO length
@407 0067	///                       0407 [0067]: (  103:  'g')                      
@408 0061	///                       0408 [0061]: (   97:  'a')                      
@409 006d	///                       0409 [006d]: (  109:  'm')                      
@40a 0065	///                       040a [0065]: (  101:  'e')                      
@40b 0020	///                       040b [0020]: (   32:  ' ')                      	// ' '
@40c 006f	///                       040c [006f]: (  111:  'o')                      
@40d 0076	///                       040d [0076]: (  118:  'v')                      
@40e 0065	///                       040e [0065]: (  101:  'e')                      
@40f 0072	///                       040f [0072]: (  114:  'r')                      
@410 0021	///                       0410 [0021]: (   33:  '!')                      
@411 0412	///             A_MG_YWN: 0411 [0412]: ( 1042: 1042)                      
@412 0008	///               MG_YWN: 0412 [0008]: (    8:    8)                      	// MG_YWN length
@413 0079	///                       0413 [0079]: (  121:  'y')                      
@414 006f	///                       0414 [006f]: (  111:  'o')                      
@415 0075	///                       0415 [0075]: (  117:  'u')                      
@416 0020	///                       0416 [0020]: (   32:  ' ')                      	// ' '
@417 0077	///                       0417 [0077]: (  119:  'w')                      
@418 0069	///                       0418 [0069]: (  105:  'i')                      
@419 006e	///                       0419 [006e]: (  110:  'n')                      
@41a 0021	///                       041a [0021]: (   33:  '!')                      
@41b 041c	///             A_MG_IWN: 041b [041c]: ( 1052: 1052)                      
@41c 0006	///               MG_IWN: 041c [0006]: (    6:    6)                      	// MG_IWN length
@41d 0049	///                       041d [0049]: (   73:  'I')                      
@41e 0020	///                       041e [0020]: (   32:  ' ')                      	// ' '
@41f 0077	///                       041f [0077]: (  119:  'w')                      
@420 0069	///                       0420 [0069]: (  105:  'i')                      
@421 006e	///                       0421 [006e]: (  110:  'n')                      
@422 0021	///                       0422 [0021]: (   33:  '!')                      
@423 0424	///             A_MG_TIE: 0423 [0424]: ( 1060: 1060)                      
@424 000d	///               MG_TIE: 0424 [000d]: (   13:   13)                      	// MG_TIE length
@425 0069	///                       0425 [0069]: (  105:  'i')                      
@426 0074	///                       0426 [0074]: (  116:  't')                      
@427 0027	///                       0427 [0027]: (   39:  ''')                      
@428 0073	///                       0428 [0073]: (  115:  's')                      
@429 0020	///                       0429 [0020]: (   32:  ' ')                      	// ' '
@42a 0061	///                       042a [0061]: (   97:  'a')                      
@42b 0020	///                       042b [0020]: (   32:  ' ')                      	// ' '
@42c 0074	///                       042c [0074]: (  116:  't')                      
@42d 0069	///                       042d [0069]: (  105:  'i')                      
@42e 0065	///                       042e [0065]: (  101:  'e')                      
@42f 002e	///                       042f [002e]: (   46:  '.')                      
@430 002e	///                       0430 [002e]: (   46:  '.')                      
@431 002e	///                       0431 [002e]: (   46:  '.')                      
@432 000d	///              MG_IVMV: 0432 [000d]: (   13:   13)                      	// MG_IVMV length
@433 0069	///                       0433 [0069]: (  105:  'i')                      
@434 006e	///                       0434 [006e]: (  110:  'n')                      
@435 0076	///                       0435 [0076]: (  118:  'v')                      
@436 0061	///                       0436 [0061]: (   97:  'a')                      
@437 006c	///                       0437 [006c]: (  108:  'l')                      
@438 0069	///                       0438 [0069]: (  105:  'i')                      
@439 0064	///                       0439 [0064]: (  100:  'd')                      
@43a 0020	///                       043a [0020]: (   32:  ' ')                      	// ' '
@43b 006d	///                       043b [006d]: (  109:  'm')                      
@43c 006f	///                       043c [006f]: (  111:  'o')                      
@43d 0076	///                       043d [0076]: (  118:  'v')                      
@43e 0065	///                       043e [0065]: (  101:  'e')                      
@43f 0021	///                       043f [0021]: (   33:  '!')                      
@440 0022	///               MG_WHG: 0440 [0022]: (   34:  '"')                      	// MG_WHG length
@441 000a	///                       0441 [000a]: (   10:   10)                      	// '\n'
@442 0077	///                       0442 [0077]: (  119:  'w')                      
@443 0068	///                       0443 [0068]: (  104:  'h')                      
@444 006f	///                       0444 [006f]: (  111:  'o')                      
@445 0020	///                       0445 [0020]: (   32:  ' ')                      	// ' '
@446 0067	///                       0446 [0067]: (  103:  'g')                      
@447 006f	///                       0447 [006f]: (  111:  'o')                      
@448 0065	///                       0448 [0065]: (  101:  'e')                      
@449 0073	///                       0449 [0073]: (  115:  's')                      
@44a 0020	///                       044a [0020]: (   32:  ' ')                      	// ' '
@44b 0066	///                       044b [0066]: (  102:  'f')                      
@44c 0069	///                       044c [0069]: (  105:  'i')                      
@44d 0072	///                       044d [0072]: (  114:  'r')                      
@44e 0073	///                       044e [0073]: (  115:  's')                      
@44f 0074	///                       044f [0074]: (  116:  't')                      
@450 003f	///                       0450 [003f]: (   63:  '?')                      
@451 0020	///                       0451 [0020]: (   32:  ' ')                      	// ' '
@452 0028	///                       0452 [0028]: (   40:  '(')                      
@453 0030	///                       0453 [0030]: (   48:  '0')                      
@454 003a	///                       0454 [003a]: (   58:  ':')                      
@455 0059	///                       0455 [0059]: (   89:  'Y')                      
@456 004f	///                       0456 [004f]: (   79:  'O')                      
@457 0055	///                       0457 [0055]: (   85:  'U')                      
@458 002c	///                       0458 [002c]: (   44:  ',')                      
@459 0020	///                       0459 [0020]: (   32:  ' ')                      	// ' '
@45a 0031	///                       045a [0031]: (   49:  '1')                      
@45b 003a	///                       045b [003a]: (   58:  ':')                      
@45c 004d	///                       045c [004d]: (   77:  'M')                      
@45d 0045	///                       045d [0045]: (   69:  'E')                      
@45e 002c	///                       045e [002c]: (   44:  ',')                      
@45f 0020	///                       045f [0020]: (   32:  ' ')                      	// ' '
@460 0071	///                       0460 [0071]: (  113:  'q')                      
@461 0029	///                       0461 [0029]: (   41:  ')')                      
@462 003a	///                       0462 [003a]: (   58:  ':')                      
@463 0004	///              MG_SEPR: 0463 [0004]: (    4:    4)                      	// MG_SEPR length
@464 002d	///                       0464 [002d]: (   45:  '-')                      
@465 002d	///                       0465 [002d]: (   45:  '-')                      
@466 002d	///                       0466 [002d]: (   45:  '-')                      
@467 000a	///                       0467 [000a]: (   10:   10)                      	// '\n'
@468 0469	///             A_MG_BRD: 0468 [0469]: ( 1129: 1129)                      
@469 0019	///               MG_BRD: 0469 [0019]: (   25:   25)                      	// MG_BRD length
@46a 002d	///                       046a [002d]: (   45:  '-')                      
@46b 002d	///                       046b [002d]: (   45:  '-')                      
@46c 002d	///                       046c [002d]: (   45:  '-')                      
@46d 002d	///                       046d [002d]: (   45:  '-')                      
@46e 000a	///                       046e [000a]: (   10:   10)                      	// '\n'
@46f 002d	///                       046f [002d]: (   45:  '-')                      
@470 002d	///                       0470 [002d]: (   45:  '-')                      
@471 002d	///                       0471 [002d]: (   45:  '-')                      
@472 002d	///                       0472 [002d]: (   45:  '-')                      
@473 000a	///                       0473 [000a]: (   10:   10)                      	// '\n'
@474 002d	///                       0474 [002d]: (   45:  '-')                      
@475 002d	///                       0475 [002d]: (   45:  '-')                      
@476 002d	///                       0476 [002d]: (   45:  '-')                      
@477 002d	///                       0477 [002d]: (   45:  '-')                      
@478 000a	///                       0478 [000a]: (   10:   10)                      	// '\n'
@479 002d	///                       0479 [002d]: (   45:  '-')                      
@47a 002d	///                       047a [002d]: (   45:  '-')                      
@47b 002d	///                       047b [002d]: (   45:  '-')                      
@47c 002d	///                       047c [002d]: (   45:  '-')                      
@47d 000a	///                       047d [000a]: (   10:   10)                      	// '\n'
@47e 002d	///                       047e [002d]: (   45:  '-')                      
@47f 002d	///                       047f [002d]: (   45:  '-')                      
@480 002d	///                       0480 [002d]: (   45:  '-')                      
@481 002d	///                       0481 [002d]: (   45:  '-')                      
@482 000a	///                       0482 [000a]: (   10:   10)                      	// '\n'
@483 0004	///                 MY_X: 0483 [0004]: (    4:    4)                      
@484 0001	///                 MY_Y: 0484 [0001]: (    1:    1)                      
@485 0000	///                 PC_X: 0485 [0000]: (    0:    0)                      
@486 0003	///                 PC_Y: 0486 [0003]: (    3:    3)                      
@487 0000	///               MY_WIN: 0487 [0000]: (    0:    0)                      
@488 0000	///               PC_WIN: 0488 [0000]: (    0:    0)                      
@489 0001	///             MY_SPEED: 0489 [0001]: (    1:    1)                      
@48a 0001	///             PC_SPEED: 048a [0001]: (    1:    1)                      
@48b 0000	///            PC_ACTION: 048b [0000]: (    0:    0)                      
@48c 0001	///                 SEED: 048c [0001]: (    1:    1)                      	// Initial seed
@48d 0005	///           MULTIPLIER: 048d [0005]: (    5:    5)                      	// Multiplier
@48e 0003	///                CONST: 048e [0003]: (    3:    3)                      	// Increment
@48f 0004	///                  MOD: 048f [0004]: (    4:    4)                      	// Modulus (2^3)
@490 0000	///                    X: 0490 [0000]: (    0:    0)                      
@491 0000	///                    Y: 0491 [0000]: (    0:    0)                      
@492 0000	///                    A: 0492 [0000]: (    0:    0)                      
@493 0000	///                    B: 0493 [0000]: (    0:    0)                      
@494 0000	///                    P: 0494 [0000]: (    0:    0)                      
@495 0000	///                   NB: 0495 [0000]: (    0:    0)                      
@496 0000	///                    R: 0496 [0000]: (    0:    0)                      
@497 0000	///                    Q: 0497 [0000]: (    0:    0)                      
@498 fff0	///                K_INI: 0498 [fff0]: (  -16:65520)                      
@499 0000	///                    K: 0499 [0000]: (    0:    0)                      
